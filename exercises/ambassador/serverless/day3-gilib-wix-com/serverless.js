if("test"!==process.env.NODE_ENV)try{require("source-map-support").install()}catch(t){console.error('Cannot find "source-map-support", stack traces may appear without source maps.'),console.error("Run `npm i --save source-map-support` to have better stack traces")}!function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}("undefined"!=typeof self?self:this,(function(){return(t=function(t){var e={};function n(r){if(e[r])return e[r].exports;var s=e[r]={i:r,l:!1,exports:{}};return t[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(r,s,function(e){return t[e]}.bind(null,s));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="https://localhost:3200/",n(n.s=106)}([function(t,e){t.exports=require("path")},function(t,e){t.exports=require("fs")},function(t,e,n){"use strict";n.d(e,"a",(function(){return d})),n.d(e,"d",(function(){return _})),n.d(e,"e",(function(){return g})),n.d(e,"c",(function(){return y})),n.d(e,"b",(function(){return S}));var r=n(1),s=n.n(r),i=n(0),o=n.n(i);function a(t,e){void 0===e&&(e={});for(var n=function(t){for(var e=[],n=0;n<t.length;){var r=t[n];if("*"!==r&&"+"!==r&&"?"!==r)if("\\"!==r)if("{"!==r)if("}"!==r)if(":"!==r)if("("!==r)e.push({type:"CHAR",index:n,value:t[n++]});else{var s=1,i="";if("?"===t[a=n+1])throw new TypeError('Pattern cannot start with "?" at '+a);for(;a<t.length;)if("\\"!==t[a]){if(")"===t[a]){if(0==--s){a++;break}}else if("("===t[a]&&(s++,"?"!==t[a+1]))throw new TypeError("Capturing groups are not allowed at "+a);i+=t[a++]}else i+=t[a++]+t[a++];if(s)throw new TypeError("Unbalanced pattern at "+n);if(!i)throw new TypeError("Missing pattern at "+n);e.push({type:"PATTERN",index:n,value:i}),n=a}else{for(var o="",a=n+1;a<t.length;){var c=t.charCodeAt(a);if(!(c>=48&&c<=57||c>=65&&c<=90||c>=97&&c<=122||95===c))break;o+=t[a++]}if(!o)throw new TypeError("Missing parameter name at "+n);e.push({type:"NAME",index:n,value:o}),n=a}else e.push({type:"CLOSE",index:n,value:t[n++]});else e.push({type:"OPEN",index:n,value:t[n++]});else e.push({type:"ESCAPED_CHAR",index:n++,value:t[n++]});else e.push({type:"MODIFIER",index:n,value:t[n++]})}return e.push({type:"END",index:n,value:""}),e}(t),r=e.prefixes,s=void 0===r?"./":r,i="[^"+c(e.delimiter||"/#?")+"]+?",o=[],a=0,u=0,l="",p=function(t){if(u<n.length&&n[u].type===t)return n[u++].value},f=function(t){var e=p(t);if(void 0!==e)return e;var r=n[u],s=r.type,i=r.index;throw new TypeError("Unexpected "+s+" at "+i+", expected "+t)},h=function(){for(var t,e="";t=p("CHAR")||p("ESCAPED_CHAR");)e+=t;return e};u<n.length;){var d=p("CHAR"),_=p("NAME"),g=p("PATTERN");if(_||g){var y=d||"";-1===s.indexOf(y)&&(l+=y,y=""),l&&(o.push(l),l=""),o.push({name:_||a++,prefix:y,suffix:"",pattern:g||i,modifier:p("MODIFIER")||""})}else{var S=d||p("ESCAPED_CHAR");if(S)l+=S;else if(l&&(o.push(l),l=""),p("OPEN")){y=h();var E=p("NAME")||"",m=p("PATTERN")||"",R=h();f("CLOSE"),o.push({name:E||(m?a++:""),pattern:E&&!m?i:m,prefix:y,suffix:R,modifier:p("MODIFIER")||""})}else f("END")}}return o}function c(t){return t.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1")}function u(t){return t&&t.sensitive?"":"i"}function l(t,e,n){return function(t,e,n){void 0===n&&(n={});for(var r=n.strict,s=void 0!==r&&r,i=n.start,o=void 0===i||i,a=n.end,l=void 0===a||a,p=n.encode,f=void 0===p?function(t){return t}:p,h="["+c(n.endsWith||"")+"]|$",d="["+c(n.delimiter||"/#?")+"]",_=o?"^":"",g=0,y=t;g<y.length;g++){var S=y[g];if("string"==typeof S)_+=c(f(S));else{var E=c(f(S.prefix)),m=c(f(S.suffix));if(S.pattern)if(e&&e.push(S),E||m)if("+"===S.modifier||"*"===S.modifier){var R="*"===S.modifier?"?":"";_+="(?:"+E+"((?:"+S.pattern+")(?:"+m+E+"(?:"+S.pattern+"))*)"+m+")"+R}else _+="(?:"+E+"("+S.pattern+")"+m+")"+S.modifier;else _+="("+S.pattern+")"+S.modifier;else _+="(?:"+E+m+")"+S.modifier}}if(l)s||(_+=d+"?"),_+=n.endsWith?"(?="+h+")":"$";else{var b=t[t.length-1],A="string"==typeof b?d.indexOf(b[b.length-1])>-1:void 0===b;s||(_+="(?:"+d+"(?="+h+"))?"),A||(_+="(?="+d+"|"+h+")")}return new RegExp(_,u(n))}(a(t,n),e,n)}function p(t,e,n){return t instanceof RegExp?function(t,e){if(!e)return t;for(var n=/\((?:\?<(.*?)>)?(?!\?)/g,r=0,s=n.exec(t.source);s;)e.push({name:s[1]||r++,prefix:"",suffix:"",modifier:"",pattern:""}),s=n.exec(t.source);return t}(t,e):Array.isArray(t)?function(t,e,n){var r=t.map((function(t){return p(t,e,n).source}));return new RegExp("(?:"+r.join("|")+")",u(n))}(t,e,n):l(t,e,n)}var f=n(3);const h=o.a.resolve(__dirname,f.ROUTES_BUILD_DIR);class d extends Error{constructor(t,e){super(),this.messages=t,this.status=e}}function _(t){const e=s.a.readdirSync(t,{withFileTypes:!0}).map(e=>{const n=o.a.resolve(t,e.name);return e.isDirectory()?_(n):n});return Array.prototype.concat(...e)}function g(t,e){return o.a.relative(t,e.replace(/\.[^/.]+$/,""))}function y(t,e){const n=[],r=p(t,n,{end:!1}).exec(e);return!!r&&n.reduce((t,e,n)=>{const s=r[n+1];if(!s)return t;const i=decodeURIComponent(s);return Object.assign(Object.assign({},t),{[e.name]:e.repeat?i.split(e.delimiter):i})},{})}function S(t){const e=("/"+g(h,t)).replace(/\[(\w+)\]/g,":$1");return"/index"===e?"/":"index"===o.a.basename(e)?e.replace("/index",""):e}},function(t,e,n){"use strict";var r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.SERVER_BUNDLE=e.SERVER_LOG_FILE=e.STATS_FILE=e.TSCONFIG_FILE=e.SERVER_ENTRY=e.POM_FILE=e.NODE_PLATFORM_DEFAULT_CONFIGS_DIR=e.ASSETS_DIR=e.TEMPLATES_BUILD_DIR=e.ROUTES_BUILD_DIR=e.TYPES_DIR=e.CJS_DIR=e.ES_DIR=e.STATICS_DIR=e.PUBLIC_DIR=e.TEMPLATES_DIR=e.SERVER_CHUNKS_BUILD_DIR=e.ROUTES_DIR=e.DOTENV=e.TEMPLATES=e.DOCKER_IGNORE=e.DOCKER_FILE=e.SERVER_CHUNKS_DIR=e.SERVERLESS_SCOPE_BUILD_DIR=e.SERVERLESS_SCOPE_DIR=e.SERVERLESS_DIR=e.TARGET_DIR=e.BUILD_DIR=e.SRC_DIR=void 0;const s=r(n(0));e.SRC_DIR="src",e.BUILD_DIR="dist",e.TARGET_DIR="target",e.SERVERLESS_DIR="serverless",e.SERVERLESS_SCOPE_DIR=t=>`${e.SERVERLESS_DIR}/${t}`,e.SERVERLESS_SCOPE_BUILD_DIR=(t="")=>e.SERVERLESS_SCOPE_DIR(t)+"/dist",e.SERVER_CHUNKS_DIR="chunks",e.DOCKER_FILE="Dockerfile",e.DOCKER_IGNORE=".dockerignore",e.TEMPLATES="templates",e.DOTENV=".env",e.ROUTES_DIR=s.default.join(e.SRC_DIR,"routes"),e.SERVER_CHUNKS_BUILD_DIR=s.default.join(e.BUILD_DIR,e.SERVER_CHUNKS_DIR),e.TEMPLATES_DIR=s.default.join(e.SRC_DIR,e.TEMPLATES),e.PUBLIC_DIR=s.default.join(e.SRC_DIR,"assets"),e.STATICS_DIR=s.default.join(e.BUILD_DIR,"statics"),e.ES_DIR=s.default.join(e.BUILD_DIR,"esm"),e.CJS_DIR=s.default.join(e.BUILD_DIR,"cjs"),e.TYPES_DIR=s.default.join(e.BUILD_DIR,"types"),e.ROUTES_BUILD_DIR=s.default.join(e.BUILD_DIR,"routes"),e.TEMPLATES_BUILD_DIR=s.default.join(e.STATICS_DIR,e.TEMPLATES),e.ASSETS_DIR=s.default.join(e.STATICS_DIR,"assets"),e.NODE_PLATFORM_DEFAULT_CONFIGS_DIR="test/configs",e.POM_FILE="pom.xml",e.SERVER_ENTRY="server",e.TSCONFIG_FILE="tsconfig.json",e.STATS_FILE=s.default.join(e.TARGET_DIR,"webpack-stats.json"),e.SERVER_LOG_FILE=s.default.join(e.TARGET_DIR,"server.log"),e.SERVER_BUNDLE=s.default.join(e.BUILD_DIR,"server.js")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.string=e.stream=e.pattern=e.path=e.fs=e.errno=e.array=void 0;const r=n(45);e.array=r;const s=n(46);e.errno=s;const i=n(47);e.fs=i;const o=n(48);e.path=o;const a=n(49);e.pattern=a;const c=n(64);e.stream=c;const u=n(65);e.string=u},function(t,e,n){"use strict";n(0),n(8),n(9),e.a=t=>{if("string"!=typeof t)throw new TypeError("Expected a string");return require(t)}},function(t,e){t.exports=require("@wix/serverless-api")},function(t,e){t.exports=require("stream")},function(t,e,n){"use strict";const r=n(0),s=n(22),i=n(1),o=(t,e,n)=>{if("string"!=typeof t)throw new TypeError(`Expected \`fromDir\` to be of type \`string\`, got \`${typeof t}\``);if("string"!=typeof e)throw new TypeError(`Expected \`moduleId\` to be of type \`string\`, got \`${typeof e}\``);try{t=i.realpathSync(t)}catch(e){if("ENOENT"!==e.code){if(n)return;throw e}t=r.resolve(t)}const o=r.join(t,"noop.js"),a=()=>s._resolveFilename(e,{id:o,filename:o,paths:s._nodeModulePaths(t)});if(n)try{return a()}catch(t){return}return a()};t.exports=(t,e)=>o(t,e),t.exports.silent=(t,e)=>o(t,e,!0)},function(t,e,n){"use strict";const r=n(23);t.exports=t=>{const e=r();if(!t)return e[2].getFileName();let n=!1;e.shift();for(const r of e){const e=r.getFileName();if("string"==typeof e)if(e!==t){if("module.js"!==e&&n&&e!==t)return e}else n=!0}}},function(t,e){t.exports=require("util")},function(t,e,n){"use strict";const r=n(0),s="win32"===process.platform,{REGEX_BACKSLASH:i,REGEX_REMOVE_BACKSLASH:o,REGEX_SPECIAL_CHARS:a,REGEX_SPECIAL_CHARS_GLOBAL:c}=n(12);e.isObject=t=>null!==t&&"object"==typeof t&&!Array.isArray(t),e.hasRegexChars=t=>a.test(t),e.isRegexChar=t=>1===t.length&&e.hasRegexChars(t),e.escapeRegex=t=>t.replace(c,"\\$1"),e.toPosixSlashes=t=>t.replace(i,"/"),e.removeBackslashes=t=>t.replace(o,t=>"\\"===t?"":t),e.supportsLookbehinds=()=>{const t=process.version.slice(1).split(".").map(Number);return 3===t.length&&t[0]>=9||8===t[0]&&t[1]>=10},e.isWindows=t=>t&&"boolean"==typeof t.windows?t.windows:!0===s||"\\"===r.sep,e.escapeLast=(t,n,r)=>{const s=t.lastIndexOf(n,r);return-1===s?t:"\\"===t[s-1]?e.escapeLast(t,n,s-1):`${t.slice(0,s)}\\${t.slice(s)}`},e.removePrefix=(t,e={})=>{let n=t;return n.startsWith("./")&&(n=n.slice(2),e.prefix="./"),n},e.wrapOutput=(t,e={},n={})=>{let r=`${n.contains?"":"^"}(?:${t})${n.contains?"":"$"}`;return!0===e.negated&&(r=`(?:^(?!${r}).*$)`),r}},function(t,e,n){"use strict";const r=n(0),s={DOT_LITERAL:"\\.",PLUS_LITERAL:"\\+",QMARK_LITERAL:"\\?",SLASH_LITERAL:"\\/",ONE_CHAR:"(?=.)",QMARK:"[^/]",END_ANCHOR:"(?:\\/|$)",DOTS_SLASH:"\\.{1,2}(?:\\/|$)",NO_DOT:"(?!\\.)",NO_DOTS:"(?!(?:^|\\/)\\.{1,2}(?:\\/|$))",NO_DOT_SLASH:"(?!\\.{0,1}(?:\\/|$))",NO_DOTS_SLASH:"(?!\\.{1,2}(?:\\/|$))",QMARK_NO_DOT:"[^.\\/]",STAR:"[^/]*?",START_ANCHOR:"(?:^|\\/)"},i={...s,SLASH_LITERAL:"[\\\\/]",QMARK:"[^\\\\/]",STAR:"[^\\\\/]*?",DOTS_SLASH:"\\.{1,2}(?:[\\\\/]|$)",NO_DOT:"(?!\\.)",NO_DOTS:"(?!(?:^|[\\\\/])\\.{1,2}(?:[\\\\/]|$))",NO_DOT_SLASH:"(?!\\.{0,1}(?:[\\\\/]|$))",NO_DOTS_SLASH:"(?!\\.{1,2}(?:[\\\\/]|$))",QMARK_NO_DOT:"[^.\\\\/]",START_ANCHOR:"(?:^|[\\\\/])",END_ANCHOR:"(?:[\\\\/]|$)"};t.exports={MAX_LENGTH:65536,POSIX_REGEX_SOURCE:{alnum:"a-zA-Z0-9",alpha:"a-zA-Z",ascii:"\\x00-\\x7F",blank:" \\t",cntrl:"\\x00-\\x1F\\x7F",digit:"0-9",graph:"\\x21-\\x7E",lower:"a-z",print:"\\x20-\\x7E ",punct:"\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",space:" \\t\\r\\n\\v\\f",upper:"A-Z",word:"A-Za-z0-9_",xdigit:"A-Fa-f0-9"},REGEX_BACKSLASH:/\\(?![*+?^${}(|)[\]])/g,REGEX_NON_SPECIAL_CHARS:/^[^@![\].,$*+?^{}()|\\/]+/,REGEX_SPECIAL_CHARS:/[-*+?.^${}(|)[\]]/,REGEX_SPECIAL_CHARS_BACKREF:/(\\?)((\W)(\3*))/g,REGEX_SPECIAL_CHARS_GLOBAL:/([-*+?.^${}(|)[\]])/g,REGEX_REMOVE_BACKSLASH:/(?:\[.*?[^\\]\]|\\(?=.))/g,REPLACEMENTS:{"***":"*","**/**":"**","**/**/**":"**"},CHAR_0:48,CHAR_9:57,CHAR_UPPERCASE_A:65,CHAR_LOWERCASE_A:97,CHAR_UPPERCASE_Z:90,CHAR_LOWERCASE_Z:122,CHAR_LEFT_PARENTHESES:40,CHAR_RIGHT_PARENTHESES:41,CHAR_ASTERISK:42,CHAR_AMPERSAND:38,CHAR_AT:64,CHAR_BACKWARD_SLASH:92,CHAR_CARRIAGE_RETURN:13,CHAR_CIRCUMFLEX_ACCENT:94,CHAR_COLON:58,CHAR_COMMA:44,CHAR_DOT:46,CHAR_DOUBLE_QUOTE:34,CHAR_EQUAL:61,CHAR_EXCLAMATION_MARK:33,CHAR_FORM_FEED:12,CHAR_FORWARD_SLASH:47,CHAR_GRAVE_ACCENT:96,CHAR_HASH:35,CHAR_HYPHEN_MINUS:45,CHAR_LEFT_ANGLE_BRACKET:60,CHAR_LEFT_CURLY_BRACE:123,CHAR_LEFT_SQUARE_BRACKET:91,CHAR_LINE_FEED:10,CHAR_NO_BREAK_SPACE:160,CHAR_PERCENT:37,CHAR_PLUS:43,CHAR_QUESTION_MARK:63,CHAR_RIGHT_ANGLE_BRACKET:62,CHAR_RIGHT_CURLY_BRACE:125,CHAR_RIGHT_SQUARE_BRACKET:93,CHAR_SEMICOLON:59,CHAR_SINGLE_QUOTE:39,CHAR_SPACE:32,CHAR_TAB:9,CHAR_UNDERSCORE:95,CHAR_VERTICAL_LINE:124,CHAR_ZERO_WIDTH_NOBREAK_SPACE:65279,SEP:r.sep,extglobChars:t=>({"!":{type:"negate",open:"(?:(?!(?:",close:`))${t.STAR})`},"?":{type:"qmark",open:"(?:",close:")?"},"+":{type:"plus",open:"(?:",close:")+"},"*":{type:"star",open:"(?:",close:")*"},"@":{type:"at",open:"(?:",close:")"}}),globChars:t=>!0===t?i:s}},,,function(t,e,n){"use strict";const r=n(16);t.exports=(t,e={})=>{let n=(t,s={})=>{let i=e.escapeInvalid&&r.isInvalidBrace(s),o=!0===t.invalid&&!0===e.escapeInvalid,a="";if(t.value)return(i||o)&&r.isOpenOrClose(t)?"\\"+t.value:t.value;if(t.value)return t.value;if(t.nodes)for(let e of t.nodes)a+=n(e);return a};return n(t)}},function(t,e,n){"use strict";e.isInteger=t=>"number"==typeof t?Number.isInteger(t):"string"==typeof t&&""!==t.trim()&&Number.isInteger(Number(t)),e.find=(t,e)=>t.nodes.find(t=>t.type===e),e.exceedsLimit=(t,n,r=1,s)=>!1!==s&&!(!e.isInteger(t)||!e.isInteger(n))&&(Number(n)-Number(t))/Number(r)>=s,e.escapeNode=(t,e=0,n)=>{let r=t.nodes[e];r&&(n&&r.type===n||"open"===r.type||"close"===r.type)&&!0!==r.escaped&&(r.value="\\"+r.value,r.escaped=!0)},e.encloseBrace=t=>"brace"===t.type&&t.commas>>0+t.ranges>>0==0&&(t.invalid=!0,!0),e.isInvalidBrace=t=>!("brace"!==t.type||!0!==t.invalid&&!t.dollar&&(t.commas>>0+t.ranges>>0!=0&&!0===t.open&&!0===t.close||(t.invalid=!0,0))),e.isOpenOrClose=t=>"open"===t.type||"close"===t.type||!0===t.open||!0===t.close,e.reduce=t=>t.reduce((t,e)=>("text"===e.type&&t.push(e.value),"range"===e.type&&(e.type="text"),t),[]),e.flatten=(...t)=>{const e=[],n=t=>{for(let r=0;r<t.length;r++){let s=t[r];Array.isArray(s)?n(s,e):void 0!==s&&e.push(s)}return e};return n(t),e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.statSync=e.stat=e.Settings=void 0;const r=n(67),s=n(68),i=n(69);function o(t={}){return t instanceof i.default?t:new i.default(t)}e.Settings=i.default,e.stat=function(t,e,n){if("function"==typeof e)return r.read(t,o(),e);r.read(t,o(e),n)},e.statSync=function(t,e){const n=o(e);return s.read(t,n)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Settings=e.scandirSync=e.scandir=void 0;const r=n(73),s=n(80),i=n(81);function o(t={}){return t instanceof i.default?t:new i.default(t)}e.Settings=i.default,e.scandir=function(t,e,n){if("function"==typeof e)return r.read(t,o(),e);r.read(t,o(e),n)},e.scandirSync=function(t,e){const n=o(e);return s.read(t,n)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.statSync=e.stat=e.Settings=void 0;const r=n(74),s=n(75),i=n(76);function o(t={}){return t instanceof i.default?t:new i.default(t)}e.Settings=i.default,e.stat=function(t,e,n){if("function"==typeof e)return r.read(t,o(),e);r.read(t,o(e),n)},e.statSync=function(t,e){const n=o(e);return s.read(t,n)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.joinPathSegments=e.replacePathSegmentSeparator=e.isAppliedFilter=e.isFatalError=void 0,e.isFatalError=function(t,e){return null===t.errorFilter||!t.errorFilter(e)},e.isAppliedFilter=function(t,e){return null===t||t(e)},e.replacePathSegmentSeparator=function(t,e){return t.split(/[/\\]/).join(e)},e.joinPathSegments=function(t,e,n){return""===t?e:t.endsWith(n)?t+e:t+n+e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(0),s=n(89),i=n(92),o=n(93),a=n(94);e.default=class{constructor(t){this._settings=t,this.errorFilter=new o.default(this._settings),this.entryFilter=new i.default(this._settings,this._getMicromatchOptions()),this.deepFilter=new s.default(this._settings,this._getMicromatchOptions()),this.entryTransformer=new a.default(this._settings)}_getRootDirectory(t){return r.resolve(this._settings.cwd,t.base)}_getReaderOptions(t){const e="."===t.base?"":t.base;return{basePath:e,pathSegmentSeparator:"/",concurrency:this._settings.concurrency,deepFilter:this.deepFilter.getFilter(e,t.positive,t.negative),entryFilter:this.entryFilter.getFilter(t.positive,t.negative),errorFilter:this.errorFilter.getFilter(),followSymbolicLinks:this._settings.followSymbolicLinks,fs:this._settings.fs,stats:this._settings.stats,throwErrorOnBrokenSymbolicLink:this._settings.throwErrorOnBrokenSymbolicLink,transform:this.entryTransformer.getTransformer()}}_getMicromatchOptions(){return{dot:this._settings.dot,matchBase:this._settings.baseNameMatch,nobrace:!this._settings.braceExpansion,nocase:!this._settings.caseSensitiveMatch,noext:!this._settings.extglob,noglobstar:!this._settings.globstar,posix:!0,strictSlashes:!1}}}},function(t,e){t.exports=require("module")},function(t,e,n){"use strict";const r=()=>{const t=Error.prepareStackTrace;Error.prepareStackTrace=(t,e)=>e;const e=(new Error).stack.slice(1);return Error.prepareStackTrace=t,e};t.exports=r,t.exports.default=r},function(t,e,n){"use strict";const r=n(7).PassThrough,s=Array.prototype.slice;function i(t,e){if(Array.isArray(t))for(let n=0,r=t.length;n<r;n++)t[n]=i(t[n],e);else{if(!t._readableState&&t.pipe&&(t=t.pipe(r(e))),!t._readableState||!t.pause||!t.pipe)throw new Error("Only readable stream can be merged.");t.pause()}return t}t.exports=function(){const t=[],e=s.call(arguments);let n=!1,o=e[e.length-1];o&&!Array.isArray(o)&&null==o.pipe?e.pop():o={};const a=!1!==o.end,c=!0===o.pipeError;null==o.objectMode&&(o.objectMode=!0),null==o.highWaterMark&&(o.highWaterMark=65536);const u=r(o);function l(){for(let e=0,n=arguments.length;e<n;e++)t.push(i(arguments[e],o));return p(),this}function p(){if(n)return;n=!0;let e=t.shift();if(!e)return void process.nextTick(f);Array.isArray(e)||(e=[e]);let r=e.length+1;function s(){--r>0||(n=!1,p())}function i(t){function e(){t.removeListener("merge2UnpipeEnd",e),t.removeListener("end",e),c&&t.removeListener("error",n),s()}function n(t){u.emit("error",t)}if(t._readableState.endEmitted)return s();t.on("merge2UnpipeEnd",e),t.on("end",e),c&&t.on("error",n),t.pipe(u,{end:!1}),t.resume()}for(let t=0;t<e.length;t++)i(e[t]);s()}function f(){n=!1,u.emit("queueDrain"),a&&u.end()}return u.setMaxListeners(0),u.add=l,u.on("unpipe",(function(t){t.emit("merge2UnpipeEnd")})),e.length&&l.apply(null,e),u}},function(t,e,n){"use strict";const r=n(44),s=n(66),i=n(95),o=n(96),a=n(98),c=n(4);async function u(t,e){p(t);const n=l(t,s.default,e),r=await Promise.all(n);return c.array.flatten(r)}function l(t,e,n){const s=[].concat(t),i=new a.default(n),o=r.generate(s,i),c=new e(i);return o.map(c.read,c)}function p(t){if(![].concat(t).every(t=>c.string.isString(t)&&!c.string.isEmpty(t)))throw new TypeError("Patterns must be a string (non empty) or an array of strings")}!function(t){t.sync=function(t,e){p(t);const n=l(t,o.default,e);return c.array.flatten(n)},t.stream=function(t,e){p(t);const n=l(t,i.default,e);return c.stream.merge(n)},t.generateTasks=function(t,e){p(t);const n=[].concat(t),s=new a.default(e);return r.generate(n,s)},t.isDynamicPattern=function(t,e){p(t);const n=new a.default(e);return c.pattern.isDynamicPattern(t,n)},t.escapePath=function(t){return p(t),c.path.escape(t)}}(u||(u={})),t.exports=u},function(t,e){t.exports=require("os")},function(t,e,n){"use strict";const r=n(10),s=n(56),i=t=>null!==t&&"object"==typeof t&&!Array.isArray(t),o=t=>"number"==typeof t||"string"==typeof t&&""!==t,a=t=>Number.isInteger(+t),c=t=>{let e=""+t,n=-1;if("-"===e[0]&&(e=e.slice(1)),"0"===e)return!1;for(;"0"===e[++n];);return n>0},u=(t,e,n)=>{if(e>0){let n="-"===t[0]?"-":"";n&&(t=t.slice(1)),t=n+t.padStart(n?e-1:e,"0")}return!1===n?String(t):t},l=(t,e)=>{let n="-"===t[0]?"-":"";for(n&&(t=t.slice(1),e--);t.length<e;)t="0"+t;return n?"-"+t:t},p=(t,e,n,r)=>{if(n)return s(t,e,{wrap:!1,...r});let i=String.fromCharCode(t);return t===e?i:`[${i}-${String.fromCharCode(e)}]`},f=(t,e,n)=>{if(Array.isArray(t)){let e=!0===n.wrap,r=n.capture?"":"?:";return e?`(${r}${t.join("|")})`:t.join("|")}return s(t,e,n)},h=(...t)=>new RangeError("Invalid range arguments: "+r.inspect(...t)),d=(t,e,n)=>{if(!0===n.strictRanges)throw h([t,e]);return[]},_=(t,e,n=1,r={})=>{let s=Number(t),i=Number(e);if(!Number.isInteger(s)||!Number.isInteger(i)){if(!0===r.strictRanges)throw h([t,e]);return[]}0===s&&(s=0),0===i&&(i=0);let o=s>i,a=String(t),d=String(e),_=String(n);n=Math.max(Math.abs(n),1);let g=c(a)||c(d)||c(_),y=g?Math.max(a.length,d.length,_.length):0,S=!1===g&&!1===((t,e,n)=>"string"==typeof t||"string"==typeof e||!0===n.stringify)(t,e,r),E=r.transform||(t=>e=>!0===t?Number(e):String(e))(S);if(r.toRegex&&1===n)return p(l(t,y),l(e,y),!0,r);let m={negatives:[],positives:[]},R=[],b=0;for(;o?s>=i:s<=i;)!0===r.toRegex&&n>1?m[(A=s)<0?"negatives":"positives"].push(Math.abs(A)):R.push(u(E(s,b),y,S)),s=o?s-n:s+n,b++;var A;return!0===r.toRegex?n>1?((t,e)=>{t.negatives.sort((t,e)=>t<e?-1:t>e?1:0),t.positives.sort((t,e)=>t<e?-1:t>e?1:0);let n,r=e.capture?"":"?:",s="",i="";return t.positives.length&&(s=t.positives.join("|")),t.negatives.length&&(i=`-(${r}${t.negatives.join("|")})`),n=s&&i?`${s}|${i}`:s||i,e.wrap?`(${r}${n})`:n})(m,r):f(R,null,{wrap:!1,...r}):R},g=(t,e,n,r={})=>{if(null==e&&o(t))return[t];if(!o(t)||!o(e))return d(t,e,r);if("function"==typeof n)return g(t,e,1,{transform:n});if(i(n))return g(t,e,0,n);let s={...r};return!0===s.capture&&(s.wrap=!0),n=n||s.step||1,a(n)?a(t)&&a(e)?_(t,e,n,s):((t,e,n=1,r={})=>{if(!a(t)&&t.length>1||!a(e)&&e.length>1)return d(t,e,r);let s=r.transform||(t=>String.fromCharCode(t)),i=(""+t).charCodeAt(0),o=(""+e).charCodeAt(0),c=i>o,u=Math.min(i,o),l=Math.max(i,o);if(r.toRegex&&1===n)return p(u,l,!1,r);let h=[],_=0;for(;c?i>=o:i<=o;)h.push(s(i,_)),i=c?i-n:i+n,_++;return!0===r.toRegex?f(h,null,{wrap:!1,options:r}):h})(t,e,Math.max(Math.abs(n),1),s):null==n||i(n)?g(t,e,1,n):((t,e)=>{if(!0===e.strictRanges)throw new TypeError(`Expected step "${t}" to be a number`);return[]})(n,s)};t.exports=g},function(t,e,n){"use strict";t.exports=n(61)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(7),s=n(17),i=n(30),o=n(36);class a extends o.default{constructor(){super(...arguments),this._walkStream=i.walkStream,this._stat=s.stat}dynamic(t,e){return this._walkStream(t,e)}static(t,e){const n=t.map(this._getFullEntryPath,this),s=new r.PassThrough({objectMode:!0});s._write=(r,i,o)=>this._getEntry(n[r],t[r],e).then(t=>{null!==t&&e.entryFilter(t)&&s.push(t),r===n.length-1&&s.end(),o()}).catch(o);for(let t=0;t<n.length;t++)s.write(t);return s}_getEntry(t,e,n){return this._getStat(t).then(t=>this._makeEntry(t,e)).catch(t=>{if(n.errorFilter(t))return null;throw t})}_getStat(t){return new Promise((e,n)=>{this._stat(t,this._fsStatSettings,(t,r)=>null===t?e(r):n(t))})}}e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Settings=e.walkStream=e.walkSync=e.walk=void 0;const r=n(71),s=n(85),i=n(86),o=n(88);function a(t={}){return t instanceof o.default?t:new o.default(t)}e.Settings=o.default,e.walk=function(t,e,n){if("function"==typeof e)return new r.default(t,a()).read(e);new r.default(t,a(e)).read(n)},e.walkSync=function(t,e){const n=a(e);return new i.default(t,n).read()},e.walkStream=function(t,e){const n=a(e);return new s.default(t,n).read()}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(72),s=n(18),i=n(83),o=n(20),a=n(35);class c extends a.default{constructor(t,e){super(t,e),this._settings=e,this._scandir=s.scandir,this._emitter=new r.EventEmitter,this._queue=i(this._worker.bind(this),this._settings.concurrency),this._isFatalError=!1,this._isDestroyed=!1,this._queue.drain=()=>{this._isFatalError||this._emitter.emit("end")}}read(){return this._isFatalError=!1,this._isDestroyed=!1,setImmediate(()=>{this._pushToQueue(this._root,this._settings.basePath)}),this._emitter}get isDestroyed(){return this._isDestroyed}destroy(){if(this._isDestroyed)throw new Error("The reader is already destroyed");this._isDestroyed=!0,this._queue.killAndDrain()}onEntry(t){this._emitter.on("entry",t)}onError(t){this._emitter.once("error",t)}onEnd(t){this._emitter.once("end",t)}_pushToQueue(t,e){const n={directory:t,base:e};this._queue.push(n,t=>{null!==t&&this._handleError(t)})}_worker(t,e){this._scandir(t.directory,this._settings.fsScandirSettings,(n,r)=>{if(null!==n)return e(n,void 0);for(const e of r)this._handleEntry(e,t.base);e(null,void 0)})}_handleError(t){!this._isDestroyed&&o.isFatalError(this._settings,t)&&(this._isFatalError=!0,this._isDestroyed=!0,this._emitter.emit("error",t))}_handleEntry(t,e){if(this._isDestroyed||this._isFatalError)return;const n=t.path;void 0!==e&&(t.path=o.joinPathSegments(e,t.name,this._settings.pathSegmentSeparator)),o.isAppliedFilter(this._settings.entryFilter,t)&&this._emitEntry(t),t.dirent.isDirectory()&&o.isAppliedFilter(this._settings.deepFilter,t)&&this._pushToQueue(n,t.path)}_emitEntry(t){this._emitter.emit("entry",t)}}e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IS_SUPPORT_READDIR_WITH_FILE_TYPES=void 0;const r=process.versions.node.split("."),s=parseInt(r[0],10),i=parseInt(r[1],10),o=s>10,a=10===s&&i>=10;e.IS_SUPPORT_READDIR_WITH_FILE_TYPES=o||a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.fs=void 0;const r=n(79);e.fs=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.joinPathSegments=void 0,e.joinPathSegments=function(t,e,n){return t.endsWith(n)?t+e:t+n+e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(20);e.default=class{constructor(t,e){this._root=t,this._settings=e,this._root=r.replacePathSegmentSeparator(t,e.pathSegmentSeparator)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(0),s=n(17),i=n(4);e.default=class{constructor(t){this._settings=t,this._fsStatSettings=new s.Settings({followSymbolicLink:this._settings.followSymbolicLinks,fs:this._settings.fs,throwErrorOnBrokenSymbolicLink:this._settings.followSymbolicLinks})}_getFullEntryPath(t){return r.resolve(this._settings.cwd,t)}_makeEntry(t,e){const n={name:e,path:e,dirent:i.fs.createDirentFromStats(e,t)};return this._settings.stats&&(n.stats=t),n}_isFatalError(t){return!i.errno.isEnoentCodeError(t)&&!this._settings.suppressErrors}}},,function(t,e,n){"use strict";const r=n(1),s=n(43),i=n(24),o=n(25),a=n(99),c=n(101),{FilterStream:u,UniqueStream:l}=n(104),p=()=>!1,f=t=>"!"===t[0],h=(t,e)=>{(t=>{if(!t.every(t=>"string"==typeof t))throw new TypeError("Patterns must be a string or an array of strings")})(t=s([].concat(t))),((t={})=>{if(!t.cwd)return;let e;try{e=r.statSync(t.cwd)}catch(t){return}if(!e.isDirectory())throw new Error("The `cwd` option must be a path to a directory")})(e);const n=[];e={ignore:[],expandDirectories:!0,...e};for(const[r,s]of t.entries()){if(f(s))continue;const i=t.slice(r).filter(f).map(t=>t.slice(1)),o={...e,ignore:e.ignore.concat(i)};n.push({pattern:s,options:o})}return n},d=(t,e)=>t.options.expandDirectories?((t,e)=>{let n={};return t.options.cwd&&(n.cwd=t.options.cwd),Array.isArray(t.options.expandDirectories)?n={...n,files:t.options.expandDirectories}:"object"==typeof t.options.expandDirectories&&(n={...n,...t.options.expandDirectories}),e(t.pattern,n)})(t,e):[t.pattern],_=t=>t&&t.gitignore?c.sync({cwd:t.cwd,ignore:t.ignore}):p,g=t=>e=>{const{options:n}=t;return n.ignore&&Array.isArray(n.ignore)&&n.expandDirectories&&(n.ignore=a.sync(n.ignore)),{pattern:e,options:n}};t.exports=async(t,e)=>{const n=h(t,e),[i,u]=await Promise.all([(async()=>e&&e.gitignore?c({cwd:e.cwd,ignore:e.ignore}):p)(),(async()=>{const t=await Promise.all(n.map(async t=>{const e=await d(t,a);return Promise.all(e.map(g(t)))}));return s(...t)})()]),l=await Promise.all(u.map(t=>o(t.pattern,t.options)));return s(...l).filter(t=>{return!i((e=t,e.stats instanceof r.Stats?e.path:e));var e})},t.exports.sync=(t,e)=>{const n=h(t,e).reduce((t,e)=>{const n=d(e,a.sync).map(g(e));return t.concat(n)},[]),r=_(e);return n.reduce((t,e)=>s(t,o.sync(e.pattern,e.options)),[]).filter(t=>!r(t))},t.exports.stream=(t,e)=>{const n=h(t,e).reduce((t,e)=>{const n=d(e,a.sync).map(g(e));return t.concat(n)},[]),r=_(e),s=new u(t=>!r(t)),c=new l;return i(n.map(t=>o.stream(t.pattern,t.options))).pipe(s).pipe(c)},t.exports.generateGlobTasks=h,t.exports.hasMagic=(t,e)=>[].concat(t).some(t=>o.isDynamicPattern(t,e)),t.exports.gitignore=c},function(t,e){t.exports=require("url")},,,,function(t,e,n){"use strict";t.exports=(...t)=>[...new Set([].concat(...t))]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.convertPatternGroupToTask=e.convertPatternGroupsToTasks=e.groupPatternsByBaseDirectory=e.getNegativePatternsAsPositive=e.getPositivePatterns=e.convertPatternsToTasks=e.generate=void 0;const r=n(4);function s(t,e,n){const r=a(t);return"."in r?[u(".",t,e,n)]:c(r,e,n)}function i(t){return r.pattern.getPositivePatterns(t)}function o(t,e){return r.pattern.getNegativePatterns(t).concat(e).map(r.pattern.convertToPositivePattern)}function a(t){return t.reduce((t,e)=>{const n=r.pattern.getBaseDirectory(e);return n in t?t[n].push(e):t[n]=[e],t},{})}function c(t,e,n){return Object.keys(t).map(r=>u(r,t[r],e,n))}function u(t,e,n,s){return{dynamic:s,positive:e,negative:n,base:t,patterns:[].concat(e,n.map(r.pattern.convertToNegativePattern))}}e.generate=function(t,e){const n=i(t),a=o(t,e.ignore),c=n.filter(t=>r.pattern.isStaticPattern(t,e)),u=n.filter(t=>r.pattern.isDynamicPattern(t,e)),l=s(c,a,!1),p=s(u,a,!0);return l.concat(p)},e.convertPatternsToTasks=s,e.getPositivePatterns=i,e.getNegativePatternsAsPositive=o,e.groupPatternsByBaseDirectory=a,e.convertPatternGroupsToTasks=c,e.convertPatternGroupToTask=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.splitWhen=e.flatten=void 0,e.flatten=function(t){return t.reduce((t,e)=>[].concat(t,e),[])},e.splitWhen=function(t,e){const n=[[]];let r=0;for(const s of t)e(s)?(r++,n[r]=[]):n[r].push(s);return n}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isEnoentCodeError=void 0,e.isEnoentCodeError=function(t){return"ENOENT"===t.code}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createDirentFromStats=void 0;class r{constructor(t,e){this.name=t,this.isBlockDevice=e.isBlockDevice.bind(e),this.isCharacterDevice=e.isCharacterDevice.bind(e),this.isDirectory=e.isDirectory.bind(e),this.isFIFO=e.isFIFO.bind(e),this.isFile=e.isFile.bind(e),this.isSocket=e.isSocket.bind(e),this.isSymbolicLink=e.isSymbolicLink.bind(e)}}e.createDirentFromStats=function(t,e){return new r(t,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.removeLeadingDotSegment=e.escape=e.makeAbsolute=e.unixify=void 0;const r=n(0),s=/(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;e.unixify=function(t){return t.replace(/\\/g,"/")},e.makeAbsolute=function(t,e){return r.resolve(t,e)},e.escape=function(t){return t.replace(s,"\\$2")},e.removeLeadingDotSegment=function(t){if("."===t.charAt(0)){const e=t.charAt(1);if("/"===e||"\\"===e)return t.slice(2)}return t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.matchAny=e.convertPatternsToRe=e.makeRe=e.getPatternParts=e.expandBraceExpansion=e.expandPatternsWithBraceExpansion=e.isAffectDepthOfReadingPattern=e.endsWithSlashGlobStar=e.hasGlobStar=e.getBaseDirectory=e.getPositivePatterns=e.getNegativePatterns=e.isPositivePattern=e.isNegativePattern=e.convertToNegativePattern=e.convertToPositivePattern=e.isDynamicPattern=e.isStaticPattern=void 0;const r=n(0),s=n(50),i=n(53),o=n(28),a=/[*?]|^!/,c=/\[.*]/,u=/(?:^|[^!*+?@])\(.*\|.*\)/,l=/[!*+?@]\(.*\)/,p=/{.*(?:,|\.\.).*}/;function f(t,e={}){return!h(t,e)}function h(t,e={}){return!!(""!==t&&(!1===e.caseSensitiveMatch||t.includes("\\")||a.test(t)||c.test(t)||u.test(t)||!1!==e.extglob&&l.test(t)||!1!==e.braceExpansion&&p.test(t)))}function d(t){return t.startsWith("!")&&"("!==t[1]}function _(t){return!d(t)}function g(t){return t.endsWith("/**")}function y(t){return i.braces(t,{expand:!0,nodupes:!0})}function S(t,e){return i.makeRe(t,e)}e.isStaticPattern=f,e.isDynamicPattern=h,e.convertToPositivePattern=function(t){return d(t)?t.slice(1):t},e.convertToNegativePattern=function(t){return"!"+t},e.isNegativePattern=d,e.isPositivePattern=_,e.getNegativePatterns=function(t){return t.filter(d)},e.getPositivePatterns=function(t){return t.filter(_)},e.getBaseDirectory=function(t){return s(t,{flipBackslashes:!1})},e.hasGlobStar=function(t){return t.includes("**")},e.endsWithSlashGlobStar=g,e.isAffectDepthOfReadingPattern=function(t){const e=r.basename(t);return g(t)||f(e)},e.expandPatternsWithBraceExpansion=function(t){return t.reduce((t,e)=>t.concat(y(e)),[])},e.expandBraceExpansion=y,e.getPatternParts=function(t,e){let{parts:n}=o.scan(t,Object.assign(Object.assign({},e),{parts:!0}));return 0===n.length&&(n=[t]),n[0].startsWith("/")&&(n[0]=n[0].slice(1),n.unshift("")),n},e.makeRe=S,e.convertPatternsToRe=function(t,e){return t.map(t=>S(t,e))},e.matchAny=function(t,e){return e.some(e=>e.test(t))}},function(t,e,n){"use strict";var r=n(51),s=n(0).posix.dirname,i="win32"===n(26).platform(),o=/\\/g,a=/[\{\[].*[\/]*.*[\}\]]$/,c=/(^|[^\\])([\{\[]|\([^\)]+$)/,u=/\\([\!\*\?\|\[\]\(\)\{\}])/g;t.exports=function(t,e){Object.assign({flipBackslashes:!0},e).flipBackslashes&&i&&t.indexOf("/")<0&&(t=t.replace(o,"/")),a.test(t)&&(t+="/"),t+="a";do{t=s(t)}while(r(t)||c.test(t));return t.replace(u,"$1")}},function(t,e,n){var r=n(52),s={"{":"}","(":")","[":"]"},i=/\\(.)|(^!|\*|[\].+)]\?|\[[^\\\]]+\]|\{[^\\}]+\}|\(\?[:!=][^\\)]+\)|\([^|]+\|[^\\)]+\))/,o=/\\(.)|(^!|[*?{}()[\]]|\(\?)/;t.exports=function(t,e){if("string"!=typeof t||""===t)return!1;if(r(t))return!0;var n,a=i;for(e&&!1===e.strict&&(a=o);n=a.exec(t);){if(n[2])return!0;var c=n.index+n[0].length,u=n[1],l=u?s[u]:null;if(u&&l){var p=t.indexOf(l,c);-1!==p&&(c=p+1)}t=t.slice(c)}return!1}},function(t,e){t.exports=function(t){if("string"!=typeof t||""===t)return!1;for(var e;e=/(\\).|([@?!+*]\(.*\))/g.exec(t);){if(e[2])return!0;t=t.slice(e.index+e[0].length)}return!1}},function(t,e,n){"use strict";const r=n(10),s=n(54),i=n(28),o=n(11),a=t=>"string"==typeof t&&(""===t||"./"===t),c=(t,e,n)=>{e=[].concat(e),t=[].concat(t);let r=new Set,s=new Set,o=new Set,a=0,c=t=>{o.add(t.output),n&&n.onResult&&n.onResult(t)};for(let o=0;o<e.length;o++){let u=i(String(e[o]),{...n,onResult:c},!0),l=u.state.negated||u.state.negatedExtglob;l&&a++;for(let e of t){let t=u(e,!0);(l?!t.isMatch:t.isMatch)&&(l?r.add(t.output):(r.delete(t.output),s.add(t.output)))}}let u=(a===e.length?[...o]:[...s]).filter(t=>!r.has(t));if(n&&0===u.length){if(!0===n.failglob)throw new Error(`No matches found for "${e.join(", ")}"`);if(!0===n.nonull||!0===n.nullglob)return n.unescape?e.map(t=>t.replace(/\\/g,"")):e}return u};c.match=c,c.matcher=(t,e)=>i(t,e),c.any=c.isMatch=(t,e,n)=>i(e,n)(t),c.not=(t,e,n={})=>{e=[].concat(e).map(String);let r=new Set,s=[],i=c(t,e,{...n,onResult:t=>{n.onResult&&n.onResult(t),s.push(t.output)}});for(let t of s)i.includes(t)||r.add(t);return[...r]},c.contains=(t,e,n)=>{if("string"!=typeof t)throw new TypeError(`Expected a string: "${r.inspect(t)}"`);if(Array.isArray(e))return e.some(e=>c.contains(t,e,n));if("string"==typeof e){if(a(t)||a(e))return!1;if(t.includes(e)||t.startsWith("./")&&t.slice(2).includes(e))return!0}return c.isMatch(t,e,{...n,contains:!0})},c.matchKeys=(t,e,n)=>{if(!o.isObject(t))throw new TypeError("Expected the first argument to be an object");let r=c(Object.keys(t),e,n),s={};for(let e of r)s[e]=t[e];return s},c.some=(t,e,n)=>{let r=[].concat(t);for(let t of[].concat(e)){let e=i(String(t),n);if(r.some(t=>e(t)))return!0}return!1},c.every=(t,e,n)=>{let r=[].concat(t);for(let t of[].concat(e)){let e=i(String(t),n);if(!r.every(t=>e(t)))return!1}return!0},c.all=(t,e,n)=>{if("string"!=typeof t)throw new TypeError(`Expected a string: "${r.inspect(t)}"`);return[].concat(e).every(e=>i(e,n)(t))},c.capture=(t,e,n)=>{let r=o.isWindows(n),s=i.makeRe(String(t),{...n,capture:!0}).exec(r?o.toPosixSlashes(e):e);if(s)return s.slice(1).map(t=>void 0===t?"":t)},c.makeRe=(...t)=>i.makeRe(...t),c.scan=(...t)=>i.scan(...t),c.parse=(t,e)=>{let n=[];for(let r of[].concat(t||[]))for(let t of s(String(r),e))n.push(i.parse(t,e));return n},c.braces=(t,e)=>{if("string"!=typeof t)throw new TypeError("Expected a string");return e&&!0===e.nobrace||!/\{.*\}/.test(t)?[t]:s(t,e)},c.braceExpand=(t,e)=>{if("string"!=typeof t)throw new TypeError("Expected a string");return c.braces(t,{...e,expand:!0})},t.exports=c},function(t,e,n){"use strict";const r=n(15),s=n(55),i=n(58),o=n(59),a=(t,e={})=>{let n=[];if(Array.isArray(t))for(let r of t){let t=a.create(r,e);Array.isArray(t)?n.push(...t):n.push(t)}else n=[].concat(a.create(t,e));return e&&!0===e.expand&&!0===e.nodupes&&(n=[...new Set(n)]),n};a.parse=(t,e={})=>o(t,e),a.stringify=(t,e={})=>r("string"==typeof t?a.parse(t,e):t,e),a.compile=(t,e={})=>("string"==typeof t&&(t=a.parse(t,e)),s(t,e)),a.expand=(t,e={})=>{"string"==typeof t&&(t=a.parse(t,e));let n=i(t,e);return!0===e.noempty&&(n=n.filter(Boolean)),!0===e.nodupes&&(n=[...new Set(n)]),n},a.create=(t,e={})=>""===t||t.length<3?[t]:!0!==e.expand?a.compile(t,e):a.expand(t,e),t.exports=a},function(t,e,n){"use strict";const r=n(27),s=n(16);t.exports=(t,e={})=>{let n=(t,i={})=>{let o=s.isInvalidBrace(i),a=!0===t.invalid&&!0===e.escapeInvalid,c=!0===o||!0===a,u=!0===e.escapeInvalid?"\\":"",l="";if(!0===t.isOpen)return u+t.value;if(!0===t.isClose)return u+t.value;if("open"===t.type)return c?u+t.value:"(";if("close"===t.type)return c?u+t.value:")";if("comma"===t.type)return"comma"===t.prev.type?"":c?t.value:"|";if(t.value)return t.value;if(t.nodes&&t.ranges>0){let n=s.reduce(t.nodes),i=r(...n,{...e,wrap:!1,toRegex:!0});if(0!==i.length)return n.length>1&&i.length>1?`(${i})`:i}if(t.nodes)for(let e of t.nodes)l+=n(e,t);return l};return n(t)}},function(t,e,n){"use strict";const r=n(57),s=(t,e,n)=>{if(!1===r(t))throw new TypeError("toRegexRange: expected the first argument to be a number");if(void 0===e||t===e)return String(t);if(!1===r(e))throw new TypeError("toRegexRange: expected the second argument to be a number.");let i={relaxZeros:!0,...n};"boolean"==typeof i.strictZeros&&(i.relaxZeros=!1===i.strictZeros);let c=t+":"+e+"="+String(i.relaxZeros)+String(i.shorthand)+String(i.capture)+String(i.wrap);if(s.cache.hasOwnProperty(c))return s.cache[c].result;let u=Math.min(t,e),l=Math.max(t,e);if(1===Math.abs(u-l)){let n=t+"|"+e;return i.capture?`(${n})`:!1===i.wrap?n:`(?:${n})`}let p=h(t)||h(e),f={min:t,max:e,a:u,b:l},d=[],_=[];return p&&(f.isPadded=p,f.maxLen=String(f.max).length),u<0&&(_=o(l<0?Math.abs(l):1,Math.abs(u),f,i),u=f.a=0),l>=0&&(d=o(u,l,f,i)),f.negatives=_,f.positives=d,f.result=function(t,e,n){let r=a(t,e,"-",!1)||[],s=a(e,t,"",!1)||[],i=a(t,e,"-?",!0)||[];return r.concat(i).concat(s).join("|")}(_,d),!0===i.capture?f.result=`(${f.result})`:!1!==i.wrap&&d.length+_.length>1&&(f.result=`(?:${f.result})`),s.cache[c]=f,f.result};function i(t,e,n){if(t===e)return{pattern:t,count:[],digits:0};let r=function(t,e){let n=[];for(let r=0;r<t.length;r++)n.push([t[r],e[r]]);return n}(t,e),s=r.length,i="",o=0;for(let t=0;t<s;t++){let[e,n]=r[t];e===n?i+=e:"0"!==e||"9"!==n?i+=`[${a=e}${(c=n)-a==1?"":"-"}${c}]`:o++}var a,c;return o&&(i+=!0===n.shorthand?"\\d":"[0-9]"),{pattern:i,count:[o],digits:s}}function o(t,e,n,r){let s,o=function(t,e){let n=1,r=1,s=l(t,n),i=new Set([e]);for(;t<=s&&s<=e;)i.add(s),n+=1,s=l(t,n);for(s=p(e+1,r)-1;t<s&&s<=e;)i.add(s),r+=1,s=p(e+1,r)-1;return i=[...i],i.sort(c),i}(t,e),a=[],u=t;for(let t=0;t<o.length;t++){let e=o[t],c=i(String(u),String(e),r),l="";n.isPadded||!s||s.pattern!==c.pattern?(n.isPadded&&(l=d(e,n,r)),c.string=l+c.pattern+f(c.count),a.push(c),u=e+1,s=c):(s.count.length>1&&s.count.pop(),s.count.push(c.count[0]),s.string=s.pattern+f(s.count),u=e+1)}return a}function a(t,e,n,r,s){let i=[];for(let s of t){let{string:t}=s;r||u(e,"string",t)||i.push(n+t),r&&u(e,"string",t)&&i.push(n+t)}return i}function c(t,e){return t>e?1:e>t?-1:0}function u(t,e,n){return t.some(t=>t[e]===n)}function l(t,e){return Number(String(t).slice(0,-e)+"9".repeat(e))}function p(t,e){return t-t%Math.pow(10,e)}function f(t){let[e=0,n=""]=t;return n||e>1?`{${e+(n?","+n:"")}}`:""}function h(t){return/^-?(0+)\d/.test(t)}function d(t,e,n){if(!e.isPadded)return t;let r=Math.abs(e.maxLen-String(t).length),s=!1!==n.relaxZeros;switch(r){case 0:return"";case 1:return s?"0?":"0";case 2:return s?"0{0,2}":"00";default:return s?`0{0,${r}}`:`0{${r}}`}}s.cache={},s.clearCache=()=>s.cache={},t.exports=s},function(t,e,n){"use strict";t.exports=function(t){return"number"==typeof t?t-t==0:"string"==typeof t&&""!==t.trim()&&(Number.isFinite?Number.isFinite(+t):isFinite(+t))}},function(t,e,n){"use strict";const r=n(27),s=n(15),i=n(16),o=(t="",e="",n=!1)=>{let r=[];if(t=[].concat(t),!(e=[].concat(e)).length)return t;if(!t.length)return n?i.flatten(e).map(t=>`{${t}}`):e;for(let s of t)if(Array.isArray(s))for(let t of s)r.push(o(t,e,n));else for(let t of e)!0===n&&"string"==typeof t&&(t=`{${t}}`),r.push(Array.isArray(t)?o(s,t,n):s+t);return i.flatten(r)};t.exports=(t,e={})=>{let n=void 0===e.rangeLimit?1e3:e.rangeLimit,a=(t,c={})=>{t.queue=[];let u=c,l=c.queue;for(;"brace"!==u.type&&"root"!==u.type&&u.parent;)u=u.parent,l=u.queue;if(t.invalid||t.dollar)return void l.push(o(l.pop(),s(t,e)));if("brace"===t.type&&!0!==t.invalid&&2===t.nodes.length)return void l.push(o(l.pop(),["{}"]));if(t.nodes&&t.ranges>0){let a=i.reduce(t.nodes);if(i.exceedsLimit(...a,e.step,n))throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");let c=r(...a,e);return 0===c.length&&(c=s(t,e)),l.push(o(l.pop(),c)),void(t.nodes=[])}let p=i.encloseBrace(t),f=t.queue,h=t;for(;"brace"!==h.type&&"root"!==h.type&&h.parent;)h=h.parent,f=h.queue;for(let e=0;e<t.nodes.length;e++){let n=t.nodes[e];"comma"!==n.type||"brace"!==t.type?"close"!==n.type?n.value&&"open"!==n.type?f.push(o(f.pop(),n.value)):n.nodes&&a(n,t):l.push(o(l.pop(),f,p)):(1===e&&f.push(""),f.push(""))}return f};return i.flatten(a(t))}},function(t,e,n){"use strict";const r=n(15),{MAX_LENGTH:s,CHAR_BACKSLASH:i,CHAR_BACKTICK:o,CHAR_COMMA:a,CHAR_DOT:c,CHAR_LEFT_PARENTHESES:u,CHAR_RIGHT_PARENTHESES:l,CHAR_LEFT_CURLY_BRACE:p,CHAR_RIGHT_CURLY_BRACE:f,CHAR_LEFT_SQUARE_BRACKET:h,CHAR_RIGHT_SQUARE_BRACKET:d,CHAR_DOUBLE_QUOTE:_,CHAR_SINGLE_QUOTE:g,CHAR_NO_BREAK_SPACE:y,CHAR_ZERO_WIDTH_NOBREAK_SPACE:S}=n(60);t.exports=(t,e={})=>{if("string"!=typeof t)throw new TypeError("Expected a string");let n=e||{},E="number"==typeof n.maxLength?Math.min(s,n.maxLength):s;if(t.length>E)throw new SyntaxError(`Input length (${t.length}), exceeds max characters (${E})`);let m,R={type:"root",input:t,nodes:[]},b=[R],A=R,v=R,x=0,w=t.length,T=0,O=0;const C=()=>t[T++],L=t=>{if("text"===t.type&&"dot"===v.type&&(v.type="text"),!v||"text"!==v.type||"text"!==t.type)return A.nodes.push(t),t.parent=A,t.prev=v,v=t,t;v.value+=t.value};for(L({type:"bos"});T<w;)if(A=b[b.length-1],m=C(),m!==S&&m!==y)if(m!==i)if(m!==d)if(m!==h)if(m!==u)if(m!==l)if(m!==_&&m!==g&&m!==o)if(m!==p)if(m!==f)if(m===a&&O>0){if(A.ranges>0){A.ranges=0;let t=A.nodes.shift();A.nodes=[t,{type:"text",value:r(A)}]}L({type:"comma",value:m}),A.commas++}else if(m===c&&O>0&&0===A.commas){let t=A.nodes;if(0===O||0===t.length){L({type:"text",value:m});continue}if("dot"===v.type){if(A.range=[],v.value+=m,v.type="range",3!==A.nodes.length&&5!==A.nodes.length){A.invalid=!0,A.ranges=0,v.type="text";continue}A.ranges++,A.args=[];continue}if("range"===v.type){t.pop();let e=t[t.length-1];e.value+=v.value+m,v=e,A.ranges--;continue}L({type:"dot",value:m})}else L({type:"text",value:m});else{if("brace"!==A.type){L({type:"text",value:m});continue}let t="close";A=b.pop(),A.close=!0,L({type:t,value:m}),O--,A=b[b.length-1]}else{O++;let t=v.value&&"$"===v.value.slice(-1)||!0===A.dollar;A=L({type:"brace",open:!0,close:!1,dollar:t,depth:O,commas:0,ranges:0,nodes:[]}),b.push(A),L({type:"open",value:m})}else{let t,n=m;for(!0!==e.keepQuotes&&(m="");T<w&&(t=C());)if(t!==i){if(t===n){!0===e.keepQuotes&&(m+=t);break}m+=t}else m+=t+C();L({type:"text",value:m})}else{if("paren"!==A.type){L({type:"text",value:m});continue}A=b.pop(),L({type:"text",value:m}),A=b[b.length-1]}else A=L({type:"paren",nodes:[]}),b.push(A),L({type:"text",value:m});else{let t;for(x++;T<w&&(t=C());)if(m+=t,t!==h)if(t!==i){if(t===d&&(x--,0===x))break}else m+=C();else x++;L({type:"text",value:m})}else L({type:"text",value:"\\"+m});else L({type:"text",value:(e.keepEscaping?m:"")+C()});do{if(A=b.pop(),"root"!==A.type){A.nodes.forEach(t=>{t.nodes||("open"===t.type&&(t.isOpen=!0),"close"===t.type&&(t.isClose=!0),t.nodes||(t.type="text"),t.invalid=!0)});let t=b[b.length-1],e=t.nodes.indexOf(A);t.nodes.splice(e,1,...A.nodes)}}while(b.length>0);return L({type:"eos"}),R}},function(t,e,n){"use strict";t.exports={MAX_LENGTH:65536,CHAR_0:"0",CHAR_9:"9",CHAR_UPPERCASE_A:"A",CHAR_LOWERCASE_A:"a",CHAR_UPPERCASE_Z:"Z",CHAR_LOWERCASE_Z:"z",CHAR_LEFT_PARENTHESES:"(",CHAR_RIGHT_PARENTHESES:")",CHAR_ASTERISK:"*",CHAR_AMPERSAND:"&",CHAR_AT:"@",CHAR_BACKSLASH:"\\",CHAR_BACKTICK:"`",CHAR_CARRIAGE_RETURN:"\r",CHAR_CIRCUMFLEX_ACCENT:"^",CHAR_COLON:":",CHAR_COMMA:",",CHAR_DOLLAR:"$",CHAR_DOT:".",CHAR_DOUBLE_QUOTE:'"',CHAR_EQUAL:"=",CHAR_EXCLAMATION_MARK:"!",CHAR_FORM_FEED:"\f",CHAR_FORWARD_SLASH:"/",CHAR_HASH:"#",CHAR_HYPHEN_MINUS:"-",CHAR_LEFT_ANGLE_BRACKET:"<",CHAR_LEFT_CURLY_BRACE:"{",CHAR_LEFT_SQUARE_BRACKET:"[",CHAR_LINE_FEED:"\n",CHAR_NO_BREAK_SPACE:"\xa0",CHAR_PERCENT:"%",CHAR_PLUS:"+",CHAR_QUESTION_MARK:"?",CHAR_RIGHT_ANGLE_BRACKET:">",CHAR_RIGHT_CURLY_BRACE:"}",CHAR_RIGHT_SQUARE_BRACKET:"]",CHAR_SEMICOLON:";",CHAR_SINGLE_QUOTE:"'",CHAR_SPACE:" ",CHAR_TAB:"\t",CHAR_UNDERSCORE:"_",CHAR_VERTICAL_LINE:"|",CHAR_ZERO_WIDTH_NOBREAK_SPACE:"\ufeff"}},function(t,e,n){"use strict";const r=n(0),s=n(62),i=n(63),o=n(11),a=n(12),c=(t,e,n=!1)=>{if(Array.isArray(t)){const r=t.map(t=>c(t,e,n));return t=>{for(const e of r){const n=e(t);if(n)return n}return!1}}const r=(s=t)&&"object"==typeof s&&!Array.isArray(s)&&t.tokens&&t.input;var s;if(""===t||"string"!=typeof t&&!r)throw new TypeError("Expected pattern to be a non-empty string");const i=e||{},a=o.isWindows(e),u=r?c.compileRe(t,e):c.makeRe(t,e,!1,!0),l=u.state;delete u.state;let p=()=>!1;if(i.ignore){const t={...e,ignore:null,onMatch:null,onResult:null};p=c(i.ignore,t,n)}const f=(n,r=!1)=>{const{isMatch:s,match:o,output:f}=c.test(n,u,e,{glob:t,posix:a}),h={glob:t,state:l,regex:u,posix:a,input:n,output:f,match:o,isMatch:s};return"function"==typeof i.onResult&&i.onResult(h),!1===s?(h.isMatch=!1,!!r&&h):p(n)?("function"==typeof i.onIgnore&&i.onIgnore(h),h.isMatch=!1,!!r&&h):("function"==typeof i.onMatch&&i.onMatch(h),!r||h)};return n&&(f.state=l),f};c.test=(t,e,n,{glob:r,posix:s}={})=>{if("string"!=typeof t)throw new TypeError("Expected input to be a string");if(""===t)return{isMatch:!1,output:""};const i=n||{},a=i.format||(s?o.toPosixSlashes:null);let u=t===r,l=u&&a?a(t):t;return!1===u&&(l=a?a(t):t,u=l===r),!1!==u&&!0!==i.capture||(u=!0===i.matchBase||!0===i.basename?c.matchBase(t,e,n,s):e.exec(l)),{isMatch:Boolean(u),match:u,output:l}},c.matchBase=(t,e,n,s=o.isWindows(n))=>(e instanceof RegExp?e:c.makeRe(e,n)).test(r.basename(t)),c.isMatch=(t,e,n)=>c(e,n)(t),c.parse=(t,e)=>Array.isArray(t)?t.map(t=>c.parse(t,e)):i(t,{...e,fastpaths:!1}),c.scan=(t,e)=>s(t,e),c.compileRe=(t,e,n=!1,r=!1)=>{if(!0===n)return t.output;const s=e||{},i=s.contains?"":"^",o=s.contains?"":"$";let a=`${i}(?:${t.output})${o}`;t&&!0===t.negated&&(a=`^(?!${a}).*$`);const u=c.toRegex(a,e);return!0===r&&(u.state=t),u},c.makeRe=(t,e,n=!1,r=!1)=>{if(!t||"string"!=typeof t)throw new TypeError("Expected a non-empty string");const s=e||{};let o,a={negated:!1,fastpaths:!0},u="";return t.startsWith("./")&&(t=t.slice(2),u=a.prefix="./"),!1===s.fastpaths||"."!==t[0]&&"*"!==t[0]||(o=i.fastpaths(t,e)),void 0===o?(a=i(t,e),a.prefix=u+(a.prefix||"")):a.output=o,c.compileRe(a,e,n,r)},c.toRegex=(t,e)=>{try{const n=e||{};return new RegExp(t,n.flags||(n.nocase?"i":""))}catch(t){if(e&&!0===e.debug)throw t;return/$^/}},c.constants=a,t.exports=c},function(t,e,n){"use strict";const r=n(11),{CHAR_ASTERISK:s,CHAR_AT:i,CHAR_BACKWARD_SLASH:o,CHAR_COMMA:a,CHAR_DOT:c,CHAR_EXCLAMATION_MARK:u,CHAR_FORWARD_SLASH:l,CHAR_LEFT_CURLY_BRACE:p,CHAR_LEFT_PARENTHESES:f,CHAR_LEFT_SQUARE_BRACKET:h,CHAR_PLUS:d,CHAR_QUESTION_MARK:_,CHAR_RIGHT_CURLY_BRACE:g,CHAR_RIGHT_PARENTHESES:y,CHAR_RIGHT_SQUARE_BRACKET:S}=n(12),E=t=>t===l||t===o,m=t=>{!0!==t.isPrefix&&(t.depth=t.isGlobstar?1/0:1)};t.exports=(t,e)=>{const n=e||{},R=t.length-1,b=!0===n.parts||!0===n.scanToEnd,A=[],v=[],x=[];let w,T,O=t,C=-1,L=0,P=0,k=!1,D=!1,I=!1,H=!1,F=!1,M=!1,N=!1,$=!1,j=!1,B=0,U={value:"",depth:0,isGlob:!1};const G=()=>C>=R,V=()=>(w=T,O.charCodeAt(++C));for(;C<R;){let t;if(T=V(),T!==o){if(!0===M||T===p){for(B++;!0!==G()&&(T=V());)if(T!==o)if(T!==p){if(!0!==M&&T===c&&(T=V())===c){if(k=U.isBrace=!0,I=U.isGlob=!0,j=!0,!0===b)continue;break}if(!0!==M&&T===a){if(k=U.isBrace=!0,I=U.isGlob=!0,j=!0,!0===b)continue;break}if(T===g&&(B--,0===B)){M=!1,k=U.isBrace=!0,j=!0;break}}else B++;else N=U.backslashes=!0,V();if(!0===b)continue;break}if(T!==l){if(!0!==n.noext&&!0==(T===d||T===i||T===s||T===_||T===u)&&O.charCodeAt(C+1)===f){if(I=U.isGlob=!0,H=U.isExtglob=!0,j=!0,!0===b){for(;!0!==G()&&(T=V());)if(T!==o){if(T===y){I=U.isGlob=!0,j=!0;break}}else N=U.backslashes=!0,T=V();continue}break}if(T===s){if(w===s&&(F=U.isGlobstar=!0),I=U.isGlob=!0,j=!0,!0===b)continue;break}if(T===_){if(I=U.isGlob=!0,j=!0,!0===b)continue;break}if(T===h)for(;!0!==G()&&(t=V());)if(t!==o){if(t===S){if(D=U.isBracket=!0,I=U.isGlob=!0,j=!0,!0===b)continue;break}}else N=U.backslashes=!0,V();if(!0===n.nonegate||T!==u||C!==L){if(!0!==n.noparen&&T===f){if(I=U.isGlob=!0,!0===b){for(;!0!==G()&&(T=V());)if(T!==f){if(T===y){j=!0;break}}else N=U.backslashes=!0,T=V();continue}break}if(!0===I){if(j=!0,!0===b)continue;break}}else $=U.negated=!0,L++}else{if(A.push(C),v.push(U),U={value:"",depth:0,isGlob:!1},!0===j)continue;if(w===c&&C===L+1){L+=2;continue}P=C+1}}else N=U.backslashes=!0,T=V(),T===p&&(M=!0)}!0===n.noext&&(H=!1,I=!1);let K=O,W="",q="";L>0&&(W=O.slice(0,L),O=O.slice(L),P-=L),K&&!0===I&&P>0?(K=O.slice(0,P),q=O.slice(P)):!0===I?(K="",q=O):K=O,K&&""!==K&&"/"!==K&&K!==O&&E(K.charCodeAt(K.length-1))&&(K=K.slice(0,-1)),!0===n.unescape&&(q&&(q=r.removeBackslashes(q)),K&&!0===N&&(K=r.removeBackslashes(K)));const Q={prefix:W,input:t,start:L,base:K,glob:q,isBrace:k,isBracket:D,isGlob:I,isExtglob:H,isGlobstar:F,negated:$};if(!0===n.tokens&&(Q.maxDepth=0,E(T)||v.push(U),Q.tokens=v),!0===n.parts||!0===n.tokens){let e;for(let r=0;r<A.length;r++){const s=e?e+1:L,i=A[r],o=t.slice(s,i);n.tokens&&(0===r&&0!==L?(v[r].isPrefix=!0,v[r].value=W):v[r].value=o,m(v[r]),Q.maxDepth+=v[r].depth),0===r&&""===o||x.push(o),e=i}if(e&&e+1<t.length){const r=t.slice(e+1);x.push(r),n.tokens&&(v[v.length-1].value=r,m(v[v.length-1]),Q.maxDepth+=v[v.length-1].depth)}Q.slashes=A,Q.parts=x}return Q}},function(t,e,n){"use strict";const r=n(12),s=n(11),{MAX_LENGTH:i,POSIX_REGEX_SOURCE:o,REGEX_NON_SPECIAL_CHARS:a,REGEX_SPECIAL_CHARS_BACKREF:c,REPLACEMENTS:u}=r,l=(t,e)=>{if("function"==typeof e.expandRange)return e.expandRange(...t,e);t.sort();const n=`[${t.join("-")}]`;try{new RegExp(n)}catch(e){return t.map(t=>s.escapeRegex(t)).join("..")}return n},p=(t,e)=>`Missing ${t}: "${e}" - use "\\\\${e}" to match literal characters`,f=(t,e)=>{if("string"!=typeof t)throw new TypeError("Expected a string");t=u[t]||t;const n={...e},f="number"==typeof n.maxLength?Math.min(i,n.maxLength):i;let h=t.length;if(h>f)throw new SyntaxError(`Input length: ${h}, exceeds maximum allowed length: ${f}`);const d={type:"bos",value:"",output:n.prepend||""},_=[d],g=n.capture?"":"?:",y=s.isWindows(e),S=r.globChars(y),E=r.extglobChars(S),{DOT_LITERAL:m,PLUS_LITERAL:R,SLASH_LITERAL:b,ONE_CHAR:A,DOTS_SLASH:v,NO_DOT:x,NO_DOT_SLASH:w,NO_DOTS_SLASH:T,QMARK:O,QMARK_NO_DOT:C,STAR:L,START_ANCHOR:P}=S,k=t=>`(${g}(?:(?!${P}${t.dot?v:m}).)*?)`,D=n.dot?"":x,I=n.dot?O:C;let H=!0===n.bash?k(n):L;n.capture&&(H=`(${H})`),"boolean"==typeof n.noext&&(n.noextglob=n.noext);const F={input:t,index:-1,start:0,dot:!0===n.dot,consumed:"",output:"",prefix:"",backtrack:!1,negated:!1,brackets:0,braces:0,parens:0,quotes:0,globstar:!1,tokens:_};t=s.removePrefix(t,F),h=t.length;const M=[],N=[],$=[];let j,B=d;const U=()=>F.index===h-1,G=F.peek=(e=1)=>t[F.index+e],V=F.advance=()=>t[++F.index],K=()=>t.slice(F.index+1),W=(t="",e=0)=>{F.consumed+=t,F.index+=e},q=t=>{F.output+=null!=t.output?t.output:t.value,W(t.value)},Q=()=>{let t=1;for(;"!"===G()&&("("!==G(2)||"?"===G(3));)V(),F.start++,t++;return t%2!=0&&(F.negated=!0,F.start++,!0)},Y=t=>{F[t]++,$.push(t)},X=t=>{F[t]--,$.pop()},Z=t=>{if("globstar"===B.type){const e=F.braces>0&&("comma"===t.type||"brace"===t.type),n=!0===t.extglob||M.length&&("pipe"===t.type||"paren"===t.type);"slash"===t.type||"paren"===t.type||e||n||(F.output=F.output.slice(0,-B.output.length),B.type="star",B.value="*",B.output=H,F.output+=B.output)}if(M.length&&"paren"!==t.type&&!E[t.value]&&(M[M.length-1].inner+=t.value),(t.value||t.output)&&q(t),B&&"text"===B.type&&"text"===t.type)return B.value+=t.value,void(B.output=(B.output||"")+t.value);t.prev=B,_.push(t),B=t},z=(t,e)=>{const r={...E[e],conditions:1,inner:""};r.prev=B,r.parens=F.parens,r.output=F.output;const s=(n.capture?"(":"")+r.open;Y("parens"),Z({type:t,value:e,output:F.output?"":A}),Z({type:"paren",extglob:!0,value:V(),output:s}),M.push(r)},J=t=>{let e=t.close+(n.capture?")":"");if("negate"===t.type){let r=H;t.inner&&t.inner.length>1&&t.inner.includes("/")&&(r=k(n)),(r!==H||U()||/^\)+$/.test(K()))&&(e=t.close=")$))"+r),"bos"===t.prev.type&&U()&&(F.negatedExtglob=!0)}Z({type:"paren",extglob:!0,value:j,output:e}),X("parens")};if(!1!==n.fastpaths&&!/(^[*!]|[/()[\]{}"])/.test(t)){let r=!1,i=t.replace(c,(t,e,n,s,i,o)=>"\\"===s?(r=!0,t):"?"===s?e?e+s+(i?O.repeat(i.length):""):0===o?I+(i?O.repeat(i.length):""):O.repeat(n.length):"."===s?m.repeat(n.length):"*"===s?e?e+s+(i?H:""):H:e?t:"\\"+t);return!0===r&&(i=!0===n.unescape?i.replace(/\\/g,""):i.replace(/\\+/g,t=>t.length%2==0?"\\\\":t?"\\":"")),i===t&&!0===n.contains?(F.output=t,F):(F.output=s.wrapOutput(i,F,e),F)}for(;!U();){if(j=V(),"\0"===j)continue;if("\\"===j){const t=G();if("/"===t&&!0!==n.bash)continue;if("."===t||";"===t)continue;if(!t){j+="\\",Z({type:"text",value:j});continue}const e=/^\\+/.exec(K());let r=0;if(e&&e[0].length>2&&(r=e[0].length,F.index+=r,r%2!=0&&(j+="\\")),!0===n.unescape?j=V()||"":j+=V()||"",0===F.brackets){Z({type:"text",value:j});continue}}if(F.brackets>0&&("]"!==j||"["===B.value||"[^"===B.value)){if(!1!==n.posix&&":"===j){const t=B.value.slice(1);if(t.includes("[")&&(B.posix=!0,t.includes(":"))){const t=B.value.lastIndexOf("["),e=B.value.slice(0,t),n=B.value.slice(t+2),r=o[n];if(r){B.value=e+r,F.backtrack=!0,V(),d.output||1!==_.indexOf(B)||(d.output=A);continue}}}("["===j&&":"!==G()||"-"===j&&"]"===G())&&(j="\\"+j),"]"!==j||"["!==B.value&&"[^"!==B.value||(j="\\"+j),!0===n.posix&&"!"===j&&"["===B.value&&(j="^"),B.value+=j,q({value:j});continue}if(1===F.quotes&&'"'!==j){j=s.escapeRegex(j),B.value+=j,q({value:j});continue}if('"'===j){F.quotes=1===F.quotes?0:1,!0===n.keepQuotes&&Z({type:"text",value:j});continue}if("("===j){Y("parens"),Z({type:"paren",value:j});continue}if(")"===j){if(0===F.parens&&!0===n.strictBrackets)throw new SyntaxError(p("opening","("));const t=M[M.length-1];if(t&&F.parens===t.parens+1){J(M.pop());continue}Z({type:"paren",value:j,output:F.parens?")":"\\)"}),X("parens");continue}if("["===j){if(!0!==n.nobracket&&K().includes("]"))Y("brackets");else{if(!0!==n.nobracket&&!0===n.strictBrackets)throw new SyntaxError(p("closing","]"));j="\\"+j}Z({type:"bracket",value:j});continue}if("]"===j){if(!0===n.nobracket||B&&"bracket"===B.type&&1===B.value.length){Z({type:"text",value:j,output:"\\"+j});continue}if(0===F.brackets){if(!0===n.strictBrackets)throw new SyntaxError(p("opening","["));Z({type:"text",value:j,output:"\\"+j});continue}X("brackets");const t=B.value.slice(1);if(!0===B.posix||"^"!==t[0]||t.includes("/")||(j="/"+j),B.value+=j,q({value:j}),!1===n.literalBrackets||s.hasRegexChars(t))continue;const e=s.escapeRegex(B.value);if(F.output=F.output.slice(0,-B.value.length),!0===n.literalBrackets){F.output+=e,B.value=e;continue}B.value=`(${g}${e}|${B.value})`,F.output+=B.value;continue}if("{"===j&&!0!==n.nobrace){Y("braces");const t={type:"brace",value:j,output:"(",outputIndex:F.output.length,tokensIndex:F.tokens.length};N.push(t),Z(t);continue}if("}"===j){const t=N[N.length-1];if(!0===n.nobrace||!t){Z({type:"text",value:j,output:j});continue}let e=")";if(!0===t.dots){const t=_.slice(),r=[];for(let e=t.length-1;e>=0&&(_.pop(),"brace"!==t[e].type);e--)"dots"!==t[e].type&&r.unshift(t[e].value);e=l(r,n),F.backtrack=!0}if(!0!==t.comma&&!0!==t.dots){const n=F.output.slice(0,t.outputIndex),r=F.tokens.slice(t.tokensIndex);t.value=t.output="\\{",j=e="\\}",F.output=n;for(const t of r)F.output+=t.output||t.value}Z({type:"brace",value:j,output:e}),X("braces"),N.pop();continue}if("|"===j){M.length>0&&M[M.length-1].conditions++,Z({type:"text",value:j});continue}if(","===j){let t=j;const e=N[N.length-1];e&&"braces"===$[$.length-1]&&(e.comma=!0,t="|"),Z({type:"comma",value:j,output:t});continue}if("/"===j){if("dot"===B.type&&F.index===F.start+1){F.start=F.index+1,F.consumed="",F.output="",_.pop(),B=d;continue}Z({type:"slash",value:j,output:b});continue}if("."===j){if(F.braces>0&&"dot"===B.type){"."===B.value&&(B.output=m);const t=N[N.length-1];B.type="dots",B.output+=j,B.value+=j,t.dots=!0;continue}if(F.braces+F.parens===0&&"bos"!==B.type&&"slash"!==B.type){Z({type:"text",value:j,output:m});continue}Z({type:"dot",value:j,output:m});continue}if("?"===j){if((!B||"("!==B.value)&&!0!==n.noextglob&&"("===G()&&"?"!==G(2)){z("qmark",j);continue}if(B&&"paren"===B.type){const t=G();let e=j;if("<"===t&&!s.supportsLookbehinds())throw new Error("Node.js v10 or higher is required for regex lookbehinds");("("===B.value&&!/[!=<:]/.test(t)||"<"===t&&!/<([!=]|\w+>)/.test(K()))&&(e="\\"+j),Z({type:"text",value:j,output:e});continue}if(!0!==n.dot&&("slash"===B.type||"bos"===B.type)){Z({type:"qmark",value:j,output:C});continue}Z({type:"qmark",value:j,output:O});continue}if("!"===j){if(!0!==n.noextglob&&"("===G()&&("?"!==G(2)||!/[!=<:]/.test(G(3)))){z("negate",j);continue}if(!0!==n.nonegate&&0===F.index){Q();continue}}if("+"===j){if(!0!==n.noextglob&&"("===G()&&"?"!==G(2)){z("plus",j);continue}if(B&&"("===B.value||!1===n.regex){Z({type:"plus",value:j,output:R});continue}if(B&&("bracket"===B.type||"paren"===B.type||"brace"===B.type)||F.parens>0){Z({type:"plus",value:j});continue}Z({type:"plus",value:R});continue}if("@"===j){if(!0!==n.noextglob&&"("===G()&&"?"!==G(2)){Z({type:"at",extglob:!0,value:j,output:""});continue}Z({type:"text",value:j});continue}if("*"!==j){"$"!==j&&"^"!==j||(j="\\"+j);const t=a.exec(K());t&&(j+=t[0],F.index+=t[0].length),Z({type:"text",value:j});continue}if(B&&("globstar"===B.type||!0===B.star)){B.type="star",B.star=!0,B.value+=j,B.output=H,F.backtrack=!0,F.globstar=!0,W(j);continue}let e=K();if(!0!==n.noextglob&&/^\([^?]/.test(e)){z("star",j);continue}if("star"===B.type){if(!0===n.noglobstar){W(j);continue}const r=B.prev,s=r.prev,i="slash"===r.type||"bos"===r.type,o=s&&("star"===s.type||"globstar"===s.type);if(!0===n.bash&&(!i||e[0]&&"/"!==e[0])){Z({type:"star",value:j,output:""});continue}const a=F.braces>0&&("comma"===r.type||"brace"===r.type),c=M.length&&("pipe"===r.type||"paren"===r.type);if(!i&&"paren"!==r.type&&!a&&!c){Z({type:"star",value:j,output:""});continue}for(;"/**"===e.slice(0,3);){const n=t[F.index+4];if(n&&"/"!==n)break;e=e.slice(3),W("/**",3)}if("bos"===r.type&&U()){B.type="globstar",B.value+=j,B.output=k(n),F.output=B.output,F.globstar=!0,W(j);continue}if("slash"===r.type&&"bos"!==r.prev.type&&!o&&U()){F.output=F.output.slice(0,-(r.output+B.output).length),r.output="(?:"+r.output,B.type="globstar",B.output=k(n)+(n.strictSlashes?")":"|$)"),B.value+=j,F.globstar=!0,F.output+=r.output+B.output,W(j);continue}if("slash"===r.type&&"bos"!==r.prev.type&&"/"===e[0]){const t=void 0!==e[1]?"|$":"";F.output=F.output.slice(0,-(r.output+B.output).length),r.output="(?:"+r.output,B.type="globstar",B.output=`${k(n)}${b}|${b}${t})`,B.value+=j,F.output+=r.output+B.output,F.globstar=!0,W(j+V()),Z({type:"slash",value:"/",output:""});continue}if("bos"===r.type&&"/"===e[0]){B.type="globstar",B.value+=j,B.output=`(?:^|${b}|${k(n)}${b})`,F.output=B.output,F.globstar=!0,W(j+V()),Z({type:"slash",value:"/",output:""});continue}F.output=F.output.slice(0,-B.output.length),B.type="globstar",B.output=k(n),B.value+=j,F.output+=B.output,F.globstar=!0,W(j);continue}const r={type:"star",value:j,output:H};!0!==n.bash?!B||"bracket"!==B.type&&"paren"!==B.type||!0!==n.regex?(F.index!==F.start&&"slash"!==B.type&&"dot"!==B.type||("dot"===B.type?(F.output+=w,B.output+=w):!0===n.dot?(F.output+=T,B.output+=T):(F.output+=D,B.output+=D),"*"!==G()&&(F.output+=A,B.output+=A)),Z(r)):(r.output=j,Z(r)):(r.output=".*?","bos"!==B.type&&"slash"!==B.type||(r.output=D+r.output),Z(r))}for(;F.brackets>0;){if(!0===n.strictBrackets)throw new SyntaxError(p("closing","]"));F.output=s.escapeLast(F.output,"["),X("brackets")}for(;F.parens>0;){if(!0===n.strictBrackets)throw new SyntaxError(p("closing",")"));F.output=s.escapeLast(F.output,"("),X("parens")}for(;F.braces>0;){if(!0===n.strictBrackets)throw new SyntaxError(p("closing","}"));F.output=s.escapeLast(F.output,"{"),X("braces")}if(!0===n.strictSlashes||"star"!==B.type&&"bracket"!==B.type||Z({type:"maybe_slash",value:"",output:b+"?"}),!0===F.backtrack){F.output="";for(const t of F.tokens)F.output+=null!=t.output?t.output:t.value,t.suffix&&(F.output+=t.suffix)}return F};f.fastpaths=(t,e)=>{const n={...e},o="number"==typeof n.maxLength?Math.min(i,n.maxLength):i,a=t.length;if(a>o)throw new SyntaxError(`Input length: ${a}, exceeds maximum allowed length: ${o}`);t=u[t]||t;const c=s.isWindows(e),{DOT_LITERAL:l,SLASH_LITERAL:p,ONE_CHAR:f,DOTS_SLASH:h,NO_DOT:d,NO_DOTS:_,NO_DOTS_SLASH:g,STAR:y,START_ANCHOR:S}=r.globChars(c),E=n.dot?_:d,m=n.dot?g:d,R=n.capture?"":"?:";let b=!0===n.bash?".*?":y;n.capture&&(b=`(${b})`);const A=t=>!0===t.noglobstar?b:`(${R}(?:(?!${S}${t.dot?h:l}).)*?)`,v=t=>{switch(t){case"*":return`${E}${f}${b}`;case".*":return`${l}${f}${b}`;case"*.*":return`${E}${b}${l}${f}${b}`;case"*/*":return`${E}${b}${p}${f}${m}${b}`;case"**":return E+A(n);case"**/*":return`(?:${E}${A(n)}${p})?${m}${f}${b}`;case"**/*.*":return`(?:${E}${A(n)}${p})?${m}${b}${l}${f}${b}`;case"**/.*":return`(?:${E}${A(n)}${p})?${l}${f}${b}`;default:{const e=/^(.*?)\.(\w+)$/.exec(t);if(!e)return;const n=v(e[1]);if(!n)return;return n+l+e[2]}}},x=s.removePrefix(t,{negated:!1,prefix:""});let w=v(x);return w&&!0!==n.strictSlashes&&(w+=p+"?"),w},t.exports=f},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.merge=void 0;const r=n(24);function s(t){t.forEach(t=>t.emit("close"))}e.merge=function(t){const e=r(t);return t.forEach(t=>{t.once("error",t=>e.emit("error",t))}),e.once("close",()=>s(t)),e.once("end",()=>s(t)),e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.isEmpty=e.isString=void 0,e.isString=function(t){return"string"==typeof t},e.isEmpty=function(t){return""===t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(29),s=n(21);class i extends s.default{constructor(){super(...arguments),this._reader=new r.default(this._settings)}read(t){const e=this._getRootDirectory(t),n=this._getReaderOptions(t),r=[];return new Promise((s,i)=>{const o=this.api(e,t,n);o.once("error",i),o.on("data",t=>r.push(n.transform(t))),o.once("end",()=>s(r))})}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}}e.default=i},function(t,e,n){"use strict";function r(t,e){t(e)}function s(t,e){t(null,e)}Object.defineProperty(e,"__esModule",{value:!0}),e.read=void 0,e.read=function(t,e,n){e.fs.lstat(t,(i,o)=>null!==i?r(n,i):o.isSymbolicLink()&&e.followSymbolicLink?void e.fs.stat(t,(t,i)=>{if(null!==t)return e.throwErrorOnBrokenSymbolicLink?r(n,t):s(n,o);e.markSymbolicLink&&(i.isSymbolicLink=()=>!0),s(n,i)}):s(n,o))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.read=void 0,e.read=function(t,e){const n=e.fs.lstatSync(t);if(!n.isSymbolicLink()||!e.followSymbolicLink)return n;try{const n=e.fs.statSync(t);return e.markSymbolicLink&&(n.isSymbolicLink=()=>!0),n}catch(t){if(!e.throwErrorOnBrokenSymbolicLink)return n;throw t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(70);e.default=class{constructor(t={}){this._options=t,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=r.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(t,e){return null!=t?t:e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystemAdapter=e.FILE_SYSTEM_ADAPTER=void 0;const r=n(1);e.FILE_SYSTEM_ADAPTER={lstat:r.lstat,stat:r.stat,lstatSync:r.lstatSync,statSync:r.statSync},e.createFileSystemAdapter=function(t){return void 0===t?e.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},e.FILE_SYSTEM_ADAPTER),t)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(31);e.default=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new r.default(this._root,this._settings),this._storage=new Set}read(t){this._reader.onError(e=>{!function(t,e){t(e)}(t,e)}),this._reader.onEntry(t=>{this._storage.add(t)}),this._reader.onEnd(()=>{!function(t,e){t(null,e)}(t,[...this._storage])}),this._reader.read()}}},function(t,e){t.exports=require("events")},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.readdir=e.readdirWithFileTypes=e.read=void 0;const r=n(19),s=n(78),i=n(32),o=n(33),a=n(34);function c(t,e,n){e.fs.readdir(t,{withFileTypes:!0},(r,i)=>{if(null!==r)return l(n,r);const c=i.map(n=>({dirent:n,name:n.name,path:a.joinPathSegments(t,n.name,e.pathSegmentSeparator)}));if(!e.followSymbolicLinks)return p(n,c);const u=c.map(t=>function(t,e){return n=>{if(!t.dirent.isSymbolicLink())return n(null,t);e.fs.stat(t.path,(r,s)=>null!==r?e.throwErrorOnBrokenSymbolicLink?n(r):n(null,t):(t.dirent=o.fs.createDirentFromStats(t.name,s),n(null,t)))}}(t,e));s(u,(t,e)=>{if(null!==t)return l(n,t);p(n,e)})})}function u(t,e,n){e.fs.readdir(t,(i,c)=>{if(null!==i)return l(n,i);const u=c.map(n=>a.joinPathSegments(t,n,e.pathSegmentSeparator)),f=u.map(t=>n=>r.stat(t,e.fsStatSettings,n));s(f,(t,r)=>{if(null!==t)return l(n,t);const s=[];c.forEach((t,n)=>{const i=r[n],a={name:t,path:u[n],dirent:o.fs.createDirentFromStats(t,i)};e.stats&&(a.stats=i),s.push(a)}),p(n,s)})})}function l(t,e){t(e)}function p(t,e){t(null,e)}e.read=function(t,e,n){return!e.stats&&i.IS_SUPPORT_READDIR_WITH_FILE_TYPES?c(t,e,n):u(t,e,n)},e.readdirWithFileTypes=c,e.readdir=u},function(t,e,n){"use strict";function r(t,e){t(e)}function s(t,e){t(null,e)}Object.defineProperty(e,"__esModule",{value:!0}),e.read=void 0,e.read=function(t,e,n){e.fs.lstat(t,(i,o)=>null!==i?r(n,i):o.isSymbolicLink()&&e.followSymbolicLink?void e.fs.stat(t,(t,i)=>{if(null!==t)return e.throwErrorOnBrokenSymbolicLink?r(n,t):s(n,o);e.markSymbolicLink&&(i.isSymbolicLink=()=>!0),s(n,i)}):s(n,o))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.read=void 0,e.read=function(t,e){const n=e.fs.lstatSync(t);if(!n.isSymbolicLink()||!e.followSymbolicLink)return n;try{const n=e.fs.statSync(t);return e.markSymbolicLink&&(n.isSymbolicLink=()=>!0),n}catch(t){if(!e.throwErrorOnBrokenSymbolicLink)return n;throw t}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(77);e.default=class{constructor(t={}){this._options=t,this.followSymbolicLink=this._getValue(this._options.followSymbolicLink,!0),this.fs=r.createFileSystemAdapter(this._options.fs),this.markSymbolicLink=this._getValue(this._options.markSymbolicLink,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0)}_getValue(t,e){return null!=t?t:e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystemAdapter=e.FILE_SYSTEM_ADAPTER=void 0;const r=n(1);e.FILE_SYSTEM_ADAPTER={lstat:r.lstat,stat:r.stat,lstatSync:r.lstatSync,statSync:r.statSync},e.createFileSystemAdapter=function(t){return void 0===t?e.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},e.FILE_SYSTEM_ADAPTER),t)}},function(t,e){t.exports=function(t,e){var n,r,s,i=!0;function o(t){function r(){e&&e(t,n),e=null}i?process.nextTick(r):r()}function a(t,e,s){n[t]=s,(0==--r||e)&&o(e)}Array.isArray(t)?(n=[],r=t.length):(s=Object.keys(t),n={},r=s.length),r?s?s.forEach((function(e){t[e]((function(t,n){a(e,t,n)}))})):t.forEach((function(t,e){t((function(t,n){a(e,t,n)}))})):o(null),i=!1}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createDirentFromStats=void 0;class r{constructor(t,e){this.name=t,this.isBlockDevice=e.isBlockDevice.bind(e),this.isCharacterDevice=e.isCharacterDevice.bind(e),this.isDirectory=e.isDirectory.bind(e),this.isFIFO=e.isFIFO.bind(e),this.isFile=e.isFile.bind(e),this.isSocket=e.isSocket.bind(e),this.isSymbolicLink=e.isSymbolicLink.bind(e)}}e.createDirentFromStats=function(t,e){return new r(t,e)}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.readdir=e.readdirWithFileTypes=e.read=void 0;const r=n(19),s=n(32),i=n(33),o=n(34);function a(t,e){return e.fs.readdirSync(t,{withFileTypes:!0}).map(n=>{const r={dirent:n,name:n.name,path:o.joinPathSegments(t,n.name,e.pathSegmentSeparator)};if(r.dirent.isSymbolicLink()&&e.followSymbolicLinks)try{const t=e.fs.statSync(r.path);r.dirent=i.fs.createDirentFromStats(r.name,t)}catch(t){if(e.throwErrorOnBrokenSymbolicLink)throw t}return r})}function c(t,e){return e.fs.readdirSync(t).map(n=>{const s=o.joinPathSegments(t,n,e.pathSegmentSeparator),a=r.statSync(s,e.fsStatSettings),c={name:n,path:s,dirent:i.fs.createDirentFromStats(n,a)};return e.stats&&(c.stats=a),c})}e.read=function(t,e){return!e.stats&&s.IS_SUPPORT_READDIR_WITH_FILE_TYPES?a(t,e):c(t,e)},e.readdirWithFileTypes=a,e.readdir=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(0),s=n(19),i=n(82);e.default=class{constructor(t={}){this._options=t,this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!1),this.fs=i.createFileSystemAdapter(this._options.fs),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,r.sep),this.stats=this._getValue(this._options.stats,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!0),this.fsStatSettings=new s.Settings({followSymbolicLink:this.followSymbolicLinks,fs:this.fs,throwErrorOnBrokenSymbolicLink:this.throwErrorOnBrokenSymbolicLink})}_getValue(t,e){return null!=t?t:e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.createFileSystemAdapter=e.FILE_SYSTEM_ADAPTER=void 0;const r=n(1);e.FILE_SYSTEM_ADAPTER={lstat:r.lstat,stat:r.stat,lstatSync:r.lstatSync,statSync:r.statSync,readdir:r.readdir,readdirSync:r.readdirSync},e.createFileSystemAdapter=function(t){return void 0===t?e.FILE_SYSTEM_ADAPTER:Object.assign(Object.assign({},e.FILE_SYSTEM_ADAPTER),t)}},function(t,e,n){"use strict";var r=n(84);function s(){}function i(){this.value=null,this.callback=s,this.next=null,this.release=s,this.context=null,this.errorHandler=null;var t=this;this.worked=function(e,n){var r=t.callback,i=t.errorHandler,o=t.value;t.value=null,t.callback=s,t.errorHandler&&i(e,o),r.call(t.context,e,n),t.release(t)}}t.exports=function(t,e,n){if("function"==typeof t&&(n=e,e=t,t=null),n<1)throw new Error("fastqueue concurrency must be greater than 1");var o=r(i),a=null,c=null,u=0,l=null,p={push:function(n,r){var i=o.get();i.context=t,i.release=f,i.value=n,i.callback=r||s,i.errorHandler=l,u===p.concurrency||p.paused?c?(c.next=i,c=i):(a=i,c=i,p.saturated()):(u++,e.call(t,i.value,i.worked))},drain:s,saturated:s,pause:function(){p.paused=!0},paused:!1,concurrency:n,running:function(){return u},resume:function(){if(p.paused){p.paused=!1;for(var t=0;t<p.concurrency;t++)u++,f()}},idle:function(){return 0===u&&0===p.length()},length:function(){for(var t=a,e=0;t;)t=t.next,e++;return e},getQueue:function(){for(var t=a,e=[];t;)e.push(t.value),t=t.next;return e},unshift:function(n,r){var i=o.get();i.context=t,i.release=f,i.value=n,i.callback=r||s,u===p.concurrency||p.paused?a?(i.next=a,a=i):(a=i,c=i,p.saturated()):(u++,e.call(t,i.value,i.worked))},empty:s,kill:function(){a=null,c=null,p.drain=s},killAndDrain:function(){a=null,c=null,p.drain(),p.drain=s},error:function(t){l=t}};return p;function f(n){n&&o.release(n);var r=a;r?p.paused?u--:(c===a&&(c=null),a=r.next,r.next=null,e.call(t,r.value,r.worked),null===c&&p.empty()):0==--u&&p.drain()}}},function(t,e,n){"use strict";t.exports=function(t){var e=new t,n=e;return{get:function(){var r=e;return r.next?e=r.next:(e=new t,n=e),r.next=null,r},release:function(t){n.next=t,n=t}}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(7),s=n(31);e.default=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new s.default(this._root,this._settings),this._stream=new r.Readable({objectMode:!0,read:()=>{},destroy:()=>{this._reader.isDestroyed||this._reader.destroy()}})}read(){return this._reader.onError(t=>{this._stream.emit("error",t)}),this._reader.onEntry(t=>{this._stream.push(t)}),this._reader.onEnd(()=>{this._stream.push(null)}),this._reader.read(),this._stream}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(87);e.default=class{constructor(t,e){this._root=t,this._settings=e,this._reader=new r.default(this._root,this._settings)}read(){return this._reader.read()}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(18),s=n(20),i=n(35);class o extends i.default{constructor(){super(...arguments),this._scandir=r.scandirSync,this._storage=new Set,this._queue=new Set}read(){return this._pushToQueue(this._root,this._settings.basePath),this._handleQueue(),[...this._storage]}_pushToQueue(t,e){this._queue.add({directory:t,base:e})}_handleQueue(){for(const t of this._queue.values())this._handleDirectory(t.directory,t.base)}_handleDirectory(t,e){try{const n=this._scandir(t,this._settings.fsScandirSettings);for(const t of n)this._handleEntry(t,e)}catch(t){this._handleError(t)}}_handleError(t){if(s.isFatalError(this._settings,t))throw t}_handleEntry(t,e){const n=t.path;void 0!==e&&(t.path=s.joinPathSegments(e,t.name,this._settings.pathSegmentSeparator)),s.isAppliedFilter(this._settings.entryFilter,t)&&this._pushToStorage(t),t.dirent.isDirectory()&&s.isAppliedFilter(this._settings.deepFilter,t)&&this._pushToQueue(n,t.path)}_pushToStorage(t){this._storage.add(t)}}e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(0),s=n(18);e.default=class{constructor(t={}){this._options=t,this.basePath=this._getValue(this._options.basePath,void 0),this.concurrency=this._getValue(this._options.concurrency,1/0),this.deepFilter=this._getValue(this._options.deepFilter,null),this.entryFilter=this._getValue(this._options.entryFilter,null),this.errorFilter=this._getValue(this._options.errorFilter,null),this.pathSegmentSeparator=this._getValue(this._options.pathSegmentSeparator,r.sep),this.fsScandirSettings=new s.Settings({followSymbolicLinks:this._options.followSymbolicLinks,fs:this._options.fs,pathSegmentSeparator:this._options.pathSegmentSeparator,stats:this._options.stats,throwErrorOnBrokenSymbolicLink:this._options.throwErrorOnBrokenSymbolicLink})}_getValue(t,e){return null!=t?t:e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(4),s=n(90);e.default=class{constructor(t,e){this._settings=t,this._micromatchOptions=e}getFilter(t,e,n){const r=this._getMatcher(e),s=this._getNegativePatternsRe(n);return e=>this._filter(t,e,r,s)}_getMatcher(t){return new s.default(t,this._settings,this._micromatchOptions)}_getNegativePatternsRe(t){const e=t.filter(r.pattern.isAffectDepthOfReadingPattern);return r.pattern.convertPatternsToRe(e,this._micromatchOptions)}_filter(t,e,n,s){if(this._isSkippedByDeep(t,e.path))return!1;if(this._isSkippedSymbolicLink(e))return!1;const i=r.path.removeLeadingDotSegment(e.path);return!this._isSkippedByPositivePatterns(i,n)&&this._isSkippedByNegativePatterns(i,s)}_isSkippedByDeep(t,e){return this._settings.deep!==1/0&&this._getEntryLevel(t,e)>=this._settings.deep}_getEntryLevel(t,e){const n=e.split("/").length;return""===t?n:n-t.split("/").length}_isSkippedSymbolicLink(t){return!this._settings.followSymbolicLinks&&t.dirent.isSymbolicLink()}_isSkippedByPositivePatterns(t,e){return!this._settings.baseNameMatch&&!e.match(t)}_isSkippedByNegativePatterns(t,e){return!r.pattern.matchAny(t,e)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(91);class s extends r.default{match(t){const e=t.split("/"),n=e.length,r=this._storage.filter(t=>!t.complete||t.segments.length>n);for(const t of r){const r=t.sections[0];if(!t.complete&&n>r.length)return!0;if(e.every((e,n)=>{const r=t.segments[n];return!(!r.dynamic||!r.patternRe.test(e))||!r.dynamic&&r.pattern===e}))return!0}return!1}}e.default=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(4);e.default=class{constructor(t,e,n){this._patterns=t,this._settings=e,this._micromatchOptions=n,this._storage=[],this._fillStorage()}_fillStorage(){const t=r.pattern.expandPatternsWithBraceExpansion(this._patterns);for(const e of t){const t=this._getPatternSegments(e),n=this._splitSegmentsIntoSections(t);this._storage.push({complete:n.length<=1,pattern:e,segments:t,sections:n})}}_getPatternSegments(t){return r.pattern.getPatternParts(t,this._micromatchOptions).map(t=>r.pattern.isDynamicPattern(t,this._settings)?{dynamic:!0,pattern:t,patternRe:r.pattern.makeRe(t,this._micromatchOptions)}:{dynamic:!1,pattern:t})}_splitSegmentsIntoSections(t){return r.array.splitWhen(t,t=>t.dynamic&&r.pattern.hasGlobStar(t.pattern))}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(4);e.default=class{constructor(t,e){this._settings=t,this._micromatchOptions=e,this.index=new Map}getFilter(t,e){const n=r.pattern.convertPatternsToRe(t,this._micromatchOptions),s=r.pattern.convertPatternsToRe(e,this._micromatchOptions);return t=>this._filter(t,n,s)}_filter(t,e,n){if(this._settings.unique&&this._isDuplicateEntry(t))return!1;if(this._onlyFileFilter(t)||this._onlyDirectoryFilter(t))return!1;if(this._isSkippedByAbsoluteNegativePatterns(t.path,n))return!1;const r=this._settings.baseNameMatch?t.name:t.path,s=this._isMatchToPatterns(r,e)&&!this._isMatchToPatterns(t.path,n);return this._settings.unique&&s&&this._createIndexRecord(t),s}_isDuplicateEntry(t){return this.index.has(t.path)}_createIndexRecord(t){this.index.set(t.path,void 0)}_onlyFileFilter(t){return this._settings.onlyFiles&&!t.dirent.isFile()}_onlyDirectoryFilter(t){return this._settings.onlyDirectories&&!t.dirent.isDirectory()}_isSkippedByAbsoluteNegativePatterns(t,e){if(!this._settings.absolute)return!1;const n=r.path.makeAbsolute(this._settings.cwd,t);return r.pattern.matchAny(n,e)}_isMatchToPatterns(t,e){const n=r.path.removeLeadingDotSegment(t);return r.pattern.matchAny(n,e)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(4);e.default=class{constructor(t){this._settings=t}getFilter(){return t=>this._isNonFatalError(t)}_isNonFatalError(t){return r.errno.isEnoentCodeError(t)||this._settings.suppressErrors}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(4);e.default=class{constructor(t){this._settings=t}getTransformer(){return t=>this._transform(t)}_transform(t){let e=t.path;return this._settings.absolute&&(e=r.path.makeAbsolute(this._settings.cwd,e),e=r.path.unixify(e)),this._settings.markDirectories&&t.dirent.isDirectory()&&(e+="/"),this._settings.objectMode?Object.assign(Object.assign({},t),{path:e}):e}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(7),s=n(29),i=n(21);class o extends i.default{constructor(){super(...arguments),this._reader=new s.default(this._settings)}read(t){const e=this._getRootDirectory(t),n=this._getReaderOptions(t),s=this.api(e,t,n),i=new r.Readable({objectMode:!0,read:()=>{}});return s.once("error",t=>i.emit("error",t)).on("data",t=>i.emit("data",n.transform(t))).once("end",()=>i.emit("end")),i.once("close",()=>s.destroy()),i}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}}e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(97),s=n(21);class i extends s.default{constructor(){super(...arguments),this._reader=new r.default(this._settings)}read(t){const e=this._getRootDirectory(t),n=this._getReaderOptions(t);return this.api(e,t,n).map(n.transform)}api(t,e,n){return e.dynamic?this._reader.dynamic(t,n):this._reader.static(e.patterns,n)}}e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});const r=n(17),s=n(30),i=n(36);class o extends i.default{constructor(){super(...arguments),this._walkSync=s.walkSync,this._statSync=r.statSync}dynamic(t,e){return this._walkSync(t,e)}static(t,e){const n=[];for(const r of t){const t=this._getFullEntryPath(r),s=this._getEntry(t,r,e);null!==s&&e.entryFilter(s)&&n.push(s)}return n}_getEntry(t,e,n){try{const n=this._getStat(t);return this._makeEntry(n,e)}catch(t){if(n.errorFilter(t))return null;throw t}}_getStat(t){return this._statSync(t,this._fsStatSettings)}}e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DEFAULT_FILE_SYSTEM_ADAPTER=void 0;const r=n(1),s=n(26),i=Math.max(s.cpus().length,1);e.DEFAULT_FILE_SYSTEM_ADAPTER={lstat:r.lstat,lstatSync:r.lstatSync,stat:r.stat,statSync:r.statSync,readdir:r.readdir,readdirSync:r.readdirSync},e.default=class{constructor(t={}){this._options=t,this.absolute=this._getValue(this._options.absolute,!1),this.baseNameMatch=this._getValue(this._options.baseNameMatch,!1),this.braceExpansion=this._getValue(this._options.braceExpansion,!0),this.caseSensitiveMatch=this._getValue(this._options.caseSensitiveMatch,!0),this.concurrency=this._getValue(this._options.concurrency,i),this.cwd=this._getValue(this._options.cwd,process.cwd()),this.deep=this._getValue(this._options.deep,1/0),this.dot=this._getValue(this._options.dot,!1),this.extglob=this._getValue(this._options.extglob,!0),this.followSymbolicLinks=this._getValue(this._options.followSymbolicLinks,!0),this.fs=this._getFileSystemMethods(this._options.fs),this.globstar=this._getValue(this._options.globstar,!0),this.ignore=this._getValue(this._options.ignore,[]),this.markDirectories=this._getValue(this._options.markDirectories,!1),this.objectMode=this._getValue(this._options.objectMode,!1),this.onlyDirectories=this._getValue(this._options.onlyDirectories,!1),this.onlyFiles=this._getValue(this._options.onlyFiles,!0),this.stats=this._getValue(this._options.stats,!1),this.suppressErrors=this._getValue(this._options.suppressErrors,!1),this.throwErrorOnBrokenSymbolicLink=this._getValue(this._options.throwErrorOnBrokenSymbolicLink,!1),this.unique=this._getValue(this._options.unique,!0),this.onlyDirectories&&(this.onlyFiles=!1),this.stats&&(this.objectMode=!0)}_getValue(t,e){return void 0===t?e:t}_getFileSystemMethods(t={}){return Object.assign(Object.assign({},e.DEFAULT_FILE_SYSTEM_ADAPTER),t)}}},function(t,e,n){"use strict";const r=n(0),s=n(100),i=t=>t.length>1?`{${t.join(",")}}`:t[0],o=(t,e)=>{const n="!"===t[0]?t.slice(1):t;return r.isAbsolute(n)?n:r.join(e,n)},a=(t,e)=>{if(e.files&&!Array.isArray(e.files))throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof e.files}\``);if(e.extensions&&!Array.isArray(e.extensions))throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof e.extensions}\``);return e.files&&e.extensions?e.files.map(n=>{return r.posix.join(t,(s=n,o=e.extensions,r.extname(s)?"**/"+s:`**/${s}.${i(o)}`));var s,o}):e.files?e.files.map(e=>r.posix.join(t,"**/"+e)):e.extensions?[r.posix.join(t,"**/*."+i(e.extensions))]:[r.posix.join(t,"**")]};t.exports=async(t,e)=>{if("string"!=typeof(e={cwd:process.cwd(),...e}).cwd)throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof e.cwd}\``);const n=await Promise.all([].concat(t).map(async t=>await s.isDirectory(o(t,e.cwd))?a(t,e):t));return[].concat.apply([],n)},t.exports.sync=(t,e)=>{if("string"!=typeof(e={cwd:process.cwd(),...e}).cwd)throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof e.cwd}\``);const n=[].concat(t).map(t=>s.isDirectorySync(o(t,e.cwd))?a(t,e):t);return[].concat.apply([],n)}},function(t,e,n){"use strict";const{promisify:r}=n(10),s=n(1);async function i(t,e,n){if("string"!=typeof n)throw new TypeError("Expected a string, got "+typeof n);try{return(await r(s[t])(n))[e]()}catch(t){if("ENOENT"===t.code)return!1;throw t}}function o(t,e,n){if("string"!=typeof n)throw new TypeError("Expected a string, got "+typeof n);try{return s[t](n)[e]()}catch(t){if("ENOENT"===t.code)return!1;throw t}}e.isFile=i.bind(null,"stat","isFile"),e.isDirectory=i.bind(null,"stat","isDirectory"),e.isSymlink=i.bind(null,"lstat","isSymbolicLink"),e.isFileSync=o.bind(null,"statSync","isFile"),e.isDirectorySync=o.bind(null,"statSync","isDirectory"),e.isSymlinkSync=o.bind(null,"lstatSync","isSymbolicLink")},function(t,e,n){"use strict";const{promisify:r}=n(10),s=n(1),i=n(0),o=n(25),a=n(102),c=n(103),u=["**/node_modules/**","**/flow-typed/**","**/coverage/**","**/.git"],l=r(s.readFile),p=(t,e)=>{const n=c(i.relative(e.cwd,i.dirname(e.fileName)));return t.split(/\r?\n/).filter(Boolean).filter(t=>!t.startsWith("#")).map((t=>e=>e.startsWith("!")?"!"+i.posix.join(t,e.slice(1)):i.posix.join(t,e))(n))},f=t=>t.reduce((t,e)=>(t.add(p(e.content,{cwd:e.cwd,fileName:e.filePath})),t),a()),h=(t,e)=>n=>t.ignores(c(i.relative(e,((t,e)=>{if(t=c(t),i.isAbsolute(e)){if(e.startsWith(t))return e;throw new Error(`Path ${e} is not in cwd ${t}`)}return i.join(t,e)})(e,n)))),d=({ignore:t=[],cwd:e=c(process.cwd())}={})=>({ignore:t,cwd:e});t.exports=async t=>{t=d(t);const e=await o("**/.gitignore",{ignore:u.concat(t.ignore),cwd:t.cwd}),n=await Promise.all(e.map(e=>(async(t,e)=>{const n=i.join(e,t);return{cwd:e,filePath:n,content:await l(n,"utf8")}})(e,t.cwd))),r=f(n);return h(r,t.cwd)},t.exports.sync=t=>{t=d(t);const e=o.sync("**/.gitignore",{ignore:u.concat(t.ignore),cwd:t.cwd}).map(e=>((t,e)=>{const n=i.join(e,t);return{cwd:e,filePath:n,content:s.readFileSync(n,"utf8")}})(e,t.cwd)),n=f(e);return h(n,t.cwd)}},function(t,e){function n(t){return Array.isArray(t)?t:[t]}const r=/^\s+$/,s=/^\\!/,i=/^\\#/,o=/\r?\n/g,a=/^\.*\/|^\.+$/,c="undefined"!=typeof Symbol?Symbol.for("node-ignore"):"node-ignore",u=/([0-z])-([0-z])/g,l=[[/\\?\s+$/,t=>0===t.indexOf("\\")?" ":""],[/\\\s/g,()=>" "],[/[\\$.|*+(){^]/g,t=>"\\"+t],[/(?!\\)\?/g,()=>"[^/]"],[/^\//,()=>"^"],[/\//g,()=>"\\/"],[/^\^*\\\*\\\*\\\//,()=>"^(?:.*\\/)?"],[/^(?=[^^])/,function(){return/\/(?!$)/.test(this)?"^":"(?:^|\\/)"}],[/\\\/\\\*\\\*(?=\\\/|$)/g,(t,e,n)=>e+6<n.length?"(?:\\/[^\\/]+)*":"\\/.+"],[/(^|[^\\]+)\\\*(?=.+)/g,(t,e)=>e+"[^\\/]*"],[/\\\\\\(?=[$.|*+(){^])/g,()=>"\\"],[/\\\\/g,()=>"\\"],[/(\\)?\[([^\]/]*?)(\\*)($|\])/g,(t,e,n,r,s)=>"\\"===e?`\\[${n}${(t=>{const{length:e}=t;return t.slice(0,e-e%2)})(r)}${s}`:"]"===s&&r.length%2==0?`[${(t=>t.replace(u,(t,e,n)=>e.charCodeAt(0)<=n.charCodeAt(0)?t:""))(n)}${r}]`:"[]"],[/(?:[^*])$/,t=>/\/$/.test(t)?t+"$":t+"(?=$|\\/$)"],[/(\^|\\\/)?\\\*$/,(t,e)=>(e?e+"[^/]+":"[^/]*")+"(?=$|\\/$)"]],p=Object.create(null),f=t=>"string"==typeof t;class h{constructor(t,e,n,r){this.origin=t,this.pattern=e,this.negative=n,this.regex=r}}const d=(t,e)=>{const n=t;let r=!1;0===t.indexOf("!")&&(r=!0,t=t.substr(1));const o=((t,e,n)=>{const r=p[t];if(r)return r;const s=l.reduce((e,n)=>e.replace(n[0],n[1].bind(t)),t);return p[t]=n?new RegExp(s,"i"):new RegExp(s)})(t=t.replace(s,"!").replace(i,"#"),0,e);return new h(n,t,r,o)},_=(t,e)=>{throw new e(t)},g=(t,e,n)=>f(t)?t?!g.isNotRelative(t)||n(`path should be a \`path.relative()\`d string, but got "${e}"`,RangeError):n("path must not be empty",TypeError):n(`path must be a string, but got \`${e}\``,TypeError),y=t=>a.test(t);g.isNotRelative=y,g.convert=t=>t;class S{constructor({ignorecase:t=!0}={}){var e,n,r;this._rules=[],this._ignorecase=t,e=this,n=c,r=!0,Object.defineProperty(e,n,{value:r}),this._initCache()}_initCache(){this._ignoreCache=Object.create(null),this._testCache=Object.create(null)}_addPattern(t){if(t&&t[c])return this._rules=this._rules.concat(t._rules),void(this._added=!0);if((t=>t&&f(t)&&!r.test(t)&&0!==t.indexOf("#"))(t)){const e=d(t,this._ignorecase);this._added=!0,this._rules.push(e)}}add(t){return this._added=!1,n(f(t)?(t=>t.split(o))(t):t).forEach(this._addPattern,this),this._added&&this._initCache(),this}addPattern(t){return this.add(t)}_testOne(t,e){let n=!1,r=!1;return this._rules.forEach(s=>{const{negative:i}=s;r===i&&n!==r||i&&!n&&!r&&!e||s.regex.test(t)&&(n=!i,r=i)}),{ignored:n,unignored:r}}_test(t,e,n,r){const s=t&&g.convert(t);return g(s,t,_),this._t(s,e,n,r)}_t(t,e,n,r){if(t in e)return e[t];if(r||(r=t.split("/")),r.pop(),!r.length)return e[t]=this._testOne(t,n);const s=this._t(r.join("/")+"/",e,n,r);return e[t]=s.ignored?s:this._testOne(t,n)}ignores(t){return this._test(t,this._ignoreCache,!1).ignored}createFilter(){return t=>!this.ignores(t)}filter(t){return n(t).filter(this.createFilter())}test(t){return this._test(t,this._testCache,!0)}}const E=t=>new S(t),m=()=>!1;if(E.isPathValid=t=>g(t&&g.convert(t),t,m),E.default=E,t.exports=E,"undefined"!=typeof process&&(process.env&&process.env.IGNORE_TEST_WIN32||"win32"===process.platform)){const t=t=>/^\\\\\?\\/.test(t)||/["<>|\u0000-\u001F]+/u.test(t)?t:t.replace(/\\/g,"/");g.convert=t;const e=/^[a-z]:\//i;g.isNotRelative=t=>e.test(t)||y(t)}},function(t,e,n){"use strict";t.exports=t=>{const e=/^\\\\\?\\/.test(t),n=/[^\u0000-\u0080]+/.test(t);return e||n?t:t.replace(/\\/g,"/")}},function(t,e,n){"use strict";const{Transform:r}=n(7);class s extends r{constructor(){super({objectMode:!0})}}t.exports={FilterStream:class extends s{constructor(t){super(),this._filter=t}_transform(t,e,n){this._filter(t)&&this.push(t),n()}},UniqueStream:class extends s{constructor(){super(),this._pushed=new Set}_transform(t,e,n){this._pushed.has(t)||(this.push(t),this._pushed.add(t)),n()}}}},,function(t,e,n){"use strict";n.r(e);var r=n(0),s=n.n(r),i=n(39),o=n(1),a=n.n(o),c=n(3),u=n(2),l=n(5);const p=s.a.resolve(c.BUILD_DIR,"init-server.js");class f{constructor(){this.getServerlessOptions=()=>{let t={};const e=s.a.resolve(__dirname,c.BUILD_DIR,"serverless.options.js");try{t=Object(l.a)(e)}catch(t){}return t},this.getTemplateCustomData=async(t,e,n)=>{let r;const i=s.a.join(__dirname,`dist/templates/${t}.data.js`);return a.a.existsSync(i)&&(r=Object(l.a)(i)),r?await r(e,n):{}},this.handle=async(t,e)=>{const{pathname:n}=Object(i.parse)(t.path,!0);for(const{handler:r,route:s}of this.routes){const i=Object(u.c)(s,null==n?void 0:n.replace("/api/_api_","/_api_"));if(i)return r(t,e,i)}throw new u.a(["not found: "+t.path],404)},this.routes=this.createRoutes(),a.a.existsSync(p)&&(this.initServerFn=Object(l.a)(p))}createRoutes(){const t=s.a.resolve(__dirname,c.ROUTES_BUILD_DIR);return Object(u.d)(t).map(t=>{const e=Object(l.a)(t);return{route:Object(u.b)(t),handler:async(t,n,r)=>{const s={context:n,req:t,params:r,initData:this.initServerFn&&await this.initServerFn(n)},i=await e.call(s);if(i)return i}}})}}var h=n(6),d=n(38),_=n.n(d);const g="origin, x-wix-brand, x-requested-with, content-type, accept, x-wix-scheduler-instance, authorization, x-wix-client-artifact-id, commonconfig, consent-policy",y={"Access-Control-Allow-Origin":"https://static.parastorage.com","Access-Control-Request-Method":"*","Access-Control-Allow-Headers":g},S=()=>({...y,"content-type":"application/json"});e.default=t=>{const e=new f,n=e.getServerlessOptions();return n.security&&t.withSecurityOptions(n.security),n.bi&&t.withBiInfo(n.bi),t.addWebFunction("OPTIONS","*",async()=>new h.FullHttpResponse({status:204,body:{},headers:S()})).addWebFunction("POST","*",async(t,n)=>{try{const r={body:await e.handle(n,t),status:200,headers:S()};return new h.FullHttpResponse(r)}catch(e){throw t.logger.error(e),t.newrelic.noticeError(e),new h.HttpError({status:e.status||500,message:"internal server error"})}}).addWebFunction("GET","/app",async(t,e)=>await r(e,t)).addWebFunction("GET","/_info_",async(t,e)=>await r(e,t)).addWebFunction("GET","/_launchEditor_",async(t,e)=>await r(e,t)),_.a.sync(["dist/templates/*.ejs","!node_modules"],{cwd:__dirname,dot:!0,gitignore:!0}).forEach(n=>{const r=s.a.basename(n,".ejs");t.addTemplateRenderFunction("GET","index"===r?"/":"/"+r,"dist/templates/base-template.ejs",async(t,n)=>{const s=await e.getTemplateCustomData(r,t,n),{language:i,basename:o,debug:a}=t.aspects["web-context"];return{templateName:r,locale:i||"en",basename:o,staticsDomain:"static.parastorage.com",debug:a||!1,...s}})}),t;async function r(t,n){const r={body:await e.handle(t,n),status:200};return new h.FullHttpResponse(r)}}}])).default||t;var t}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,